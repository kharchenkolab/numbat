[{"path":"https://kharchenkolab.github.io/numbat/articles/descriptions.html","id":"list-of-output-files","dir":"Articles","previous_headings":"","what":"List of output files","title":"File descriptions","text":"Numbat generates number files output folder. file names post-fixed ith iteration phylogeny optimization. detailed list:","code":""},{"path":"https://kharchenkolab.github.io/numbat/articles/descriptions.html","id":"analysis-results","dir":"Articles","previous_headings":"List of output files","what":"Analysis results","title":"File descriptions","text":"bulk_subtrees_{}.tsv.gz: Subtree pseudobulk profiles based current cell lineage tree segs_consensus_{}.tsv.gz: Consensus segments subtree pseudobulk HMMs bulk_clones_{}.tsv.gz: Clone-level pseudobulk profiles based current cell lineage tree exp_post_{}.tsv: Expression-based posterior probabilities CNV states segment cell. allele_post_{}.tsv: Allele-based posterior probabilities CNV states segment cell. joint_post_{}.tsv: Joint posterior probabilities CNV states segment cell. clone_post_{}.tsv: Single-cell clone assignment tumor versus normal classification posteriors bulk_clones_final.tsv.gz: Clone-level pseudobulk profiles based final cell lineage tree bulk_subtrees_retest_{}.tsv.gz: Subtree pseudobulk profiles retesting CNV states gexp_roll_wide.tsv.gz: window-smoothed normalized expression profiles single cells segs_loh.tsv: Clonal LoH segments; written call_clonal_loh enabled","code":""},{"path":"https://kharchenkolab.github.io/numbat/articles/descriptions.html","id":"plots","dir":"Articles","previous_headings":"List of output files","what":"Plots","title":"File descriptions","text":"exp_roll_clust.png: visualization single-cell smoothed gene expression profiles bulk_subtrees_{}.png: visualization subtree pseudobulk CNV profiles bulk_clones_{}.png: visualization clone pseudobulk CNV profiles bulk_clones_final.png: visualization final clone pseudobulk CNV profiles tree_list_{}.rds: list candidate phylogeneies maximum likelihood tree search panel_{}.png: integrated visualization single-cell phylogeny CNV landscape","code":""},{"path":"https://kharchenkolab.github.io/numbat/articles/descriptions.html","id":"lineage-trees","dir":"Articles","previous_headings":"List of output files","what":"Lineage trees","title":"File descriptions","text":"hc.rds: initial hierarchical clustering result based smoothed expression clones_{}.rds: list candidate clones used generate bulk_clones_{}.tsv.gz subtrees_{}.rds: list candidate subtrees used generate bulk_subtrees_{}.tsv.gz tree_NJ_{}.rds: neighbor joining tree mut_graph_{}.rds: mutation graph derived current cell lineage tree tree_ML_{}.rds: maximum likelihood tree (ape::phylo format) tree_final_{}.rds: final cell lineage tree mutation clone annotation (tbl_graph format)","code":""},{"path":"https://kharchenkolab.github.io/numbat/articles/descriptions.html","id":"misc","dir":"Articles","previous_headings":"List of output files","what":"Misc","title":"File descriptions","text":"log.txt: log file sc_refs.rds: list best reference match cell","code":""},{"path":"https://kharchenkolab.github.io/numbat/articles/descriptions.html","id":"single-cell-posteriors","dir":"Articles","previous_headings":"","what":"Single-cell posteriors","title":"File descriptions","text":"cell: character; Cell barcode CHROM: character; Chromosome seg: character; Segment ID cnv_state: character; CNV state estimated pseudobulk HMM n_snp: numeric; Number SNPs segment seg_start: numeric; Segment start position seg_end: numeric; Segment end position n_genes: numeric; Number genes segment n_snps: numeric; Number SNPs segment prior_loh: numeric; Prior probability CNLoH prior_amp: numeric; Prior probability amplification prior_del: numeric; Prior probability deletion prior_bamp: numeric; Prior probability biallelic amplification prior_bdel: numeric; Prior probability biallelic deletion l11_x: numeric; Log-likelihood CNV state 1:1 (neutral) given expression data l20_x: numeric; Log-likelihood CNV state 2:0 (CNLoH) given expression data l10_x: numeric; Log-likelihood CNV state 1:0 (deletion) given expression data l21_x: numeric; Log-likelihood CNV state 2:1 (amplification) given expression data l31_x: numeric; Log-likelihood CNV state 3:1 (amplification) given expression data l22_x: numeric; Log-likelihood CNV state 2:2 (biallelic amplification) given expression data l00_x: numeric; Log-likelihood CNV state 0:0 (biallelic deletion) given expression data Z_cnv_x: numeric; Total log(likelihood * prior) CNV states given expression data Z_n_x: numeric; Total log(likelihood * prior) neutral state given expression data logBF_x: numeric; Log Bayes factor CNV state vs. neutral state given expression data l11_y: numeric; Log-likelihood CNV state 1:1 (neutral) given allele data l20_y: numeric; Log-likelihood CNV state 2:0 (CNLoH) given allele data l10_y: numeric; Log-likelihood CNV state 1:0 (deletion) given allele data l21_y: numeric; Log-likelihood CNV state 2:1 (gain) given allele data l31_y: numeric; Log-likelihood CNV state 3:1 (amplification) given allele data l22_y: numeric; Log-likelihood CNV state 2:2 (biallelic amplification) given allele data l00_y: numeric; Log-likelihood CNV state 0:0 (biallelic deletion) given allele data Z_cnv_y: numeric; Total log(likelihood * prior) CNV states given allele data Z_n_y: numeric; Total log(likelihood * prior) neutral state given allele data logBF_y: numeric; Log Bayes factor CNV state vs. neutral state given allele data LLR: numeric; Log-likelihood ratio CNV state vs. neutral state LLR_x: numeric; Log-likelihood ratio CNV state vs. neutral state given expression data LLR_y: numeric; Log-likelihood ratio CNV state vs. neutral state given allele data l11: numeric; Joint log-likelihood CNV state 1:1 (neutral) l20: numeric; Joint log-likelihood CNV state 2:0 (CNLoH) l10: numeric; Joint log-likelihood CNV state 1:0 (deletion) l21: numeric; Joint log-likelihood CNV state 2:1 (amplification) l31: numeric; Joint log-likelihood CNV state 3:1 (amplification) l22: numeric; Joint log-likelihood CNV state 2:2 (biallelic amplification) l00: numeric; Joint log-likelihood CNV state 0:0 (biallelic deletion) Z_amp: numeric; Total log(likelihood * prior) amplification state Z_loh: numeric; Total log(likelihood * prior) CNLoH state Z_del: numeric; Total log(likelihood * prior) deletion state Z_bamp: numeric; Total log(likelihood * prior) biallelic amplification state Z_bdel: numeric; Total log(likelihood * prior) biallelic deletion state Z_n: numeric; Total log(likelihood * prior) neutral state Z: numeric; Total log(likelihood * prior) states Z_cnv: numeric; Total log(likelihood * prior) CNV states p_amp: numeric; Joint posterior probability amplification states (2:1, 3:1) p_neu: numeric; Joint posterior probability neutral state p_del: numeric; Joint posterior probability deletion state p_loh: numeric; Joint posterior probability CNLoH state p_bamp: numeric; Joint posterior probability biallelic amplification state p_bdel: numeric; Joint posterior probability biallelic deletion state logBF: numeric; Joint log Bayes factor CNV state vs. neutral state p_cnv: numeric; Joint posterior probability CNV state p_n: numeric; Joint posterior probability neutral state p_cnv_x: numeric; Joint posterior probability CNV state given expression data p_cnv_y: numeric; Joint posterior probability CNV state given allele data cnv_state_mle: character; Maximum likelihood CNV state cnv_state_map: character; Maximum posteriori CNV state seg_label: character; Segment label avg_entropy: numeric; Average entropy CNV posterior single cells phi_mle: numeric; Maximum likelihood total copy number ratio relative diploid (phi) mu: numeric; Mean expression count distribution cell (Poisson log-Normal) sigma: numeric; Standard deviation expression count distribution cell (Poisson log-Normal) ref: character; Best-matching single-cell expression reference major: integer; Major allele count; total SNP pileup counts deriving major haplotype CNV region given cell minor: integer; Minor allele count; total SNP pileup counts deriving minor haplotype CNV region given cell total: integer; Total allele count MAF: numeric; Major allele frequency","code":""},{"path":"https://kharchenkolab.github.io/numbat/articles/descriptions.html","id":"pseudobulk-profiles","dir":"Articles","previous_headings":"","what":"Pseudobulk profiles","title":"File descriptions","text":"snp_id: character; SNP ID CHROM: character; Chromosome POS: integer; Genomic position cM: numeric; Genetic distance cM REF: character; Reference allele ALT: character; Alternate allele GT: character; Phased genotype gene: character; Gene symbol AD: integer; Allelic depth DP: integer; Total depth AR: numeric; Allelic fraction snp_index: integer; SNP index pBAF: numeric; Phased BAF pAD: numeric; Phased allelic depth inter_snp_cm: numeric; Genetic distance cM adjacent SNPs p_s: numeric; Probability phase switch based inter-SNP distance Y_obs: integer; Observed gene expression counts (X/Y notation switched ..) lambda_obs: numeric; Observed gene expression magnitude lambda_ref: numeric; Reference gene expression magnitude d_obs: numeric; Total gene expression count cell gene_start: integer; Gene start position gene_end: integer; Gene end position gene_length: integer; Gene length gene_index: integer; Gene index logFC: numeric; Log2 fold change gene expression lnFC: numeric; Natural log fold change gene expression mse: numeric; Mean squared error logFC snp_rate: numeric; SNP rate loh: logical; True segment clonal LoH (deletion) n_cells: integer; Number cells pseudobulk members: character; Cell groups included pseudobulk sample: character/integer; Sample ID state: character; CNV state boundary: logical; True marker CNV boundary seg_start_index: integer; Segment start marker index seg_end_index: integer; Segment end marker index seg_start: integer; Segment start position seg_end: integer; Segment end position seg_length: integer; Segment length bp seg: character; Segment ID seg_cons: character; Consensus segment ID diploid: logical; True segment diploid mu: numeric; Mean expression count distribution pseudobulk (Poisson log-Normal) sig: numeric; Standard deviation expression count distribution pseudobulk (Poisson log-Normal) cnv_state: character; CNV state n_genes: integer; Number genes segment n_snps: integer; Number SNPs segment theta_hat: numeric; Crude estimate haplotype frequency based MAF theta_mle: numeric; Maximum likelihood estimate haplotype frequency (theta) theta_sigma: numeric; Standard deviation theta MLE L_y_n: numeric; Neutral log-likelihood allele data L_y_d: numeric; Deletion log-likelihood allele data L_y_a: numeric; Amplification log-likelihood allele data phi_mle: numeric; Maximum likelihood total copy number ratio relative diploid (phi) phi_sigma: numeric; Standard deviation phi MLE L_x_n: numeric; Neutral log-likelihood expression data L_x_d: numeric; Deletion log-likelihood expression data L_x_a: numeric; Amplification log-likelihood expression data Z_cnv: numeric; Total log(likelihood * prior) CNV states Z_n: numeric; Total log(likelihood * prior) neutral state Z: numeric; Total log(likelihood * prior) states logBF: numeric; Joint log Bayes factor CNV state vs. neutral state p_neu: numeric; Joint posterior probability neutral state p_loh: numeric; Joint posterior probability CNLoH state p_amp: numeric; Joint posterior probability amplification states (2:1, 3:1) p_del: numeric; Joint posterior probability deletion state p_bamp: numeric; Joint posterior probability biallelic amplification state p_bdel: numeric; Joint posterior probability biallelic deletion state LLR_x: numeric; Log-likelihood ratio expression data LLR_y: numeric; Log-likelihood ratio allele data LLR: numeric; Log-likelihood ratio data cnv_state_post: character; Maximum posteriori (retest) CNV state state_post: character; Maximum posteriori CNV allelic state p_up: numeric; HMM posterior probability variant allele belonging major haplotype haplo_post: numeric; Maximum posteriori haplotype state assignment haplo_naive: numeric; Naive haplotype state assignment (based BAF) major_count: integer; Major allele count; total SNP counts deriving major haplotype CNV region pseudobulk minor_count: integer; Minor allele count; total SNP counts deriving minor haplotype CNV region pseudobulk theta_hat_roll: numeric; Crude estimate haplotype frequency based MAF (rolling window) phi_mle_roll: numeric; Maximum likelihood total copy number ratio relative diploid (phi, rolling window) nu: numeric; Phase-switch rate used HMM gamma: numeric; Allele inverse-overdispersion used HMM","code":""},{"path":"https://kharchenkolab.github.io/numbat/articles/descriptions.html","id":"consensus-segments","dir":"Articles","previous_headings":"","what":"Consensus segments","title":"File descriptions","text":"consensus segments subtree pseudobulk HMMs sample: character/integer; Sample ID CHROM: character; Chromosome seg: character; Segment ID cnv_state: character; CNV state cnv_state_post: character; Maximum posteriori (retest) CNV state seg_start: integer; Segment start position seg_end: integer; Segment end position seg_start_index: integer; Segment start marker index seg_end_index: integer; Segment end marker index theta_mle: numeric; Maximum likelihood estimate haplotype frequency (theta) theta_sigma: numeric; Standard deviation theta MLE phi_mle: numeric; Maximum likelihood total copy number ratio relative diploid (phi) phi_sigma: numeric; Standard deviation phi MLE p_loh: numeric; Joint posterior probability CNLoH state p_del: numeric; Joint posterior probability deletion state p_amp: numeric; Joint posterior probability amplification states (2:1, 3:1) p_bamp: numeric; Joint posterior probability biallelic amplification state p_bdel: numeric; Joint posterior probability biallelic deletion state LLR: numeric; Log-likelihood ratio data LLR_y: numeric; Log-likelihood ratio allele data LLR_x: numeric; Log-likelihood ratio expression data n_genes: integer; Number genes segment n_snps: integer; Number SNPs segment component: integer; Component ID LLR_sample: numeric; Log-likelihood ratio sample CNV highest LLR seg_length: integer; Segment length bp seg_cons: character; Consensus segment ID n_states: integer; Number CNV states cnv_states: character; CNV states","code":""},{"path":"https://kharchenkolab.github.io/numbat/articles/descriptions.html","id":"clone-assignments","dir":"Articles","previous_headings":"","what":"Clone assignments","title":"File descriptions","text":"cell: character; Cell ID clone_opt: integer; Maximum posteriori clone assignment GT_opt: character; Maximum posteriori genotype p_opt: numeric; Maximum posteriori clone probability p_{k}: numeric; Posterior probability cell beloning clone k p_x_{k}: numeric; Posterior probability cell belonging clone k given expression data p_y_{k}: numeric; Posterior probability cell belonging clone k given allele data p_cnv: numeric; Posterior probability cell belonging aneuploid clone p_cnv_x: numeric; Posterior probability cell belonging aneuploid clone given expression data p_cnv_y: numeric; Posterior probability cell belonging aneuploid clone given allele data compartment_opt: character; Maximum posteriori compartment (tumor vs normal) assignment","code":""},{"path":"https://kharchenkolab.github.io/numbat/articles/mouse.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Mouse tutorial","text":"mouse major model system studying cancer many areas biology. According 10x website, almost many cancer single-cell studies mouse subjects humans. Previously, shown prior haplotype information, Numbat can detect allele-specific CNVs much higher accuracy [1]. Although don’t usually know haplotype given human subject priori, can “guessed” statistically using population-based phasing. resulting haplotypes reasonably accurate within short blocks (<1Mb), subject switch errors longer range. mouse special case haplotypes common laboratory strains fully known (thanks mouse genome projects [2,3]). means heterozygous SNPs F1 hybrid mouse two inbred strains fully phased whole-genome level. addition, SNP density F1 hybrid mouse can many times higher humans [2]. see, factors provide huge advantage haplotype-aware CNV analysis. updated version Numbat (v1.2.0) now accepts (F1 hybrid) mouse data. input format usual (expression counts matrix, allele counts long dataframe), bioinformatics required prepare phased allele counts. tutorial walk data prepration analyze mouse PDAC scRNA-seq dataset provided Pitter et al [4].","code":""},{"path":[]},{"path":"https://kharchenkolab.github.io/numbat/articles/mouse.html","id":"prepare-the-vcf","dir":"Articles","previous_headings":"Preparing input","what":"1. Prepare the VCF","title":"Mouse tutorial","text":"First, find parental strains F1 mouse. case Pitter et al, mice C57BL/6 x Sv129 mixed genetic background. convenient genome C57BL/6 (aka Eve mouse) mm10 reference genome. means heterozygous SNPs F1 homozygous SNPs Sv129. create F1 VCF, just need take Sv129 VCF change genotype homozygous SNPs (1/1) heterozygous (1/0). VCFs common lab mouse strains available UCSC portal. downloaded -strain VCF (mgpV5MergedSNPsAlldbSNP142.vcf.gz) extracted passed homozygous sites Sv129 using bcftools: can use 129S1_SvImJ.sites.vcf.gz VCF F1 mouse (except GT changed 1/0). Note: slightly complicated neither parental strain C57BL/6. One find SNPs homozygous one parent .","code":"bcftools view mgpV5MergedSNPsAlldbSNP142.vcf.gz -c1 -s 129S1_SvImJ \\     -i \"%FILTER='PASS'\" | \\     bcftools annotate -Oz -x INFO,^FORMAT/GT > 129S1_SvImJ.sites.vcf.gz"},{"path":"https://kharchenkolab.github.io/numbat/articles/mouse.html","id":"run-pileup","dir":"Articles","previous_headings":"Preparing input","what":"2. Run pileup","title":"Mouse tutorial","text":"samples study, downloaded raw FASTQs SRA processed cellranger. Now can generate single-cell allele counts SNP positions VCF using cellsnp-lite. $cellrangerout cellranger output folder specific sample.","code":"cellsnp-lite \\     -s $cellrangerout/outs/possorted_genome_bam.bam \\     -b $cellrangerout/outs/filtered_feature_bc_matrix/barcodes.tsv.gz \\     -O ./pileup \\     -R ./129S1_SvImJ.sites.vcf.gz \\     -p 25 \\     --minMAF 0 \\     --minCOUNT 1"},{"path":"https://kharchenkolab.github.io/numbat/articles/mouse.html","id":"prepare-allele-dataframe","dir":"Articles","previous_headings":"Preparing input","what":"3. Prepare allele dataframe","title":"Mouse tutorial","text":"Let’s now read pileup output R. last line one parental genotypes mm10 reference genome, alternative alleles VCF already phase, GT 1|0. addition, since recombination, set genetic distance cM constant value sites. Note: , neither parental strain C57BL/6, one assign GT 1|0 0|1 based parent variant came . Next, can read allele counts convert long dataframe.","code":"library(dplyr) library(data.table) library(stringr) library(glue) library(Matrix)  pu_dir = './pileup'  vcf_pu = fread(glue('{pu_dir}/cellSNP.base.vcf'), skip = '#CHROM') %>%      rename(CHROM = `#CHROM`) %>%     mutate(snp_id = paste(CHROM, POS, REF, ALT, sep = '_')) %>%     mutate(CHROM = str_remove(CHROM, 'chr')) %>%     mutate(CHROM = factor(CHROM, unique(CHROM))) %>%     filter(CHROM != 'X')  vcf_phased = vcf_pu %>% mutate(GT = '1|0', cM = 0) # pileup count matrices AD = readMM(glue('{pu_dir}/cellSNP.tag.AD.mtx')) DP = readMM(glue('{pu_dir}/cellSNP.tag.DP.mtx')) barcodes = fread(glue('{pu_dir}/cellSNP.samples.tsv'), header = F)$V1  # convert to dataframe DP = as.data.frame(Matrix::summary(DP)) %>%     mutate(         cell = barcodes[j],         snp_id = vcf_pu$snp_id[i]     ) %>%     select(-i, -j) %>%     rename(DP = x) %>%     select(cell, snp_id, DP)  AD = as.data.frame(Matrix::summary(AD)) %>%     mutate(         cell = barcodes[j],         snp_id = vcf_pu$snp_id[i]     ) %>%     select(-i, -j) %>%     rename(AD = x) %>%     select(cell, snp_id, AD)  df_allele = DP %>% left_join(AD, by = c(\"cell\", \"snp_id\")) %>%     mutate(AD = ifelse(is.na(AD), 0, AD))  # attach genotype info df_allele = df_allele %>% inner_join(     vcf_phased %>% select(snp_id, CHROM, POS, REF, ALT, GT, cM),     by = 'snp_id')"},{"path":"https://kharchenkolab.github.io/numbat/articles/mouse.html","id":"prepare-the-expression-reference","dir":"Articles","previous_headings":"Preparing input","what":"4. Prepare the expression reference","title":"Mouse tutorial","text":"pancreatic tumors (PDAC), downloaded expression counts mouse normal pancreas scRNA-seq dataset (GSE159343), ran clustering using pagoda2, used construct reference expression profile (ref_pancreas). expression count matrices tumor samples prepared cellranger output usual.","code":"count_mat = readMM('~/GSE159343_RAW/GSM4826923_C57BL6J_matrix.mtx.gz') cells = fread('~/GSE159343_RAW/GSM4826923_C57BL6J_cells.tsv.gz', header = F)$V1 genes = fread('~/GSE159343_RAW/GSM4826923_C57BL6J_genes.tsv.gz', header = F)$V2 colnames(count_mat) = cells rownames(count_mat) = genes count_mat = as.matrix(count_mat) count_mat = rowsum(count_mat, rownames(count_mat)) count_mat = as(count_mat, \"dgCMatrix\") count_mat_ref = count_mat  p2 = pagoda2::basicP2proc(count_mat_ref, n.cores = 30)  clusters = p2$clusters$PCA$multilevel  ref_annot = data.frame(     cell = names(clusters),     group = unname(clusters) )  ref_pancreas = numbat::aggregate_counts(     count_mat_ref,     ref_annot %>% group_by(group) %>% filter(n() > 100) )"},{"path":"https://kharchenkolab.github.io/numbat/articles/mouse.html","id":"run-numbat","dir":"Articles","previous_headings":"","what":"Run Numbat","title":"Mouse tutorial","text":"Finally, let’s run CNV analysis using prepared data. let Numbat know mouse data, set genome build mm10 set phase switch rate nu = 0 disable phase switch (phasing perfect!). Note: admix C57BL/6 50/50, ’d create VCF way, pileup also way. Since mouse won’t alternative strain SNPs, ’d filter df_allele based bulk AF keep het SNPs (VAF ~50%) pileup. can run Numbat default switch rate (nu = 1), since ’d expect recombination create phase switches.","code":"run_numbat(     count_mat_tumor,      ref_pancreas,      df_allele,     t = 1e-5,     ncores = 20,     skip_nj = TRUE,     min_LLR = 30,     out_dir = './results',     # mouse specific settings     genome = \"mm10\",     nu = 0 )"},{"path":"https://kharchenkolab.github.io/numbat/articles/mouse.html","id":"results","dir":"Articles","previous_headings":"","what":"Results","title":"Mouse tutorial","text":"Let’s look results sample KPT_062521 (SRR20462475), see tumor subclones distinct copy number profiles (majority events copy-neutral LOH).  Let’s compare copy number profiles two major subclones (clone 4 5) pseudobulk HMM view.  see haplotype-specific differences remarkable resolution. example, subclonal copy number profiles chr3 largely agree, whereas chr4 chr9 distinct breakpoints mirorred CNLOH (chr4, middle segment). alleles collapse one side CNV region, thanks perfect phasing.","code":"nb = Numbat$new(glue('./results/{sample}')) options(repr.plot.width = 8, repr.plot.height = 4, repr.plot.res = 200)  clone_pal = c(`1` = 'gray', `2` = \"#E41A1C\", `3` = \"#377EB8\",     `4` = \"#4DAF4A\", `5` = \"#984EA3\", `6` = 'bisque3')  nb$plot_phylo_heatmap(pal_clone = clone_pal, clone_stack = TRUE, p_min = 0.9) options(repr.plot.width = 10, repr.plot.height = 4.5, repr.plot.res = 200)  nb$bulk_clones %>% filter(sample %in% c(4,5)) %>%  filter(CHROM %in% c(3, 4, 9)) %>% plot_bulks(min_depth = 15, use_pos = F, exp_limit = 2.5, min_LLR = 20)"},{"path":"https://kharchenkolab.github.io/numbat/articles/mouse.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Mouse tutorial","text":"Haplotype-aware CNV analysis espcially powerful model systems (mouse particular) haplotypes fully known. Luckily, logic Numbat written generically enough minimal tweaking algorithm required (simply setting phase switch rate zero sufficient, making special case). main limitation Numbat applicable F1 hybrid mice mixed genetic backgrounds, whereas many mouse tumor models conducted inbred (pure) genetic background, lacks heterozygous SNPs. Nonetheless, extension opens many oppurtunities integrative single-cell analysis genetically manipulatable mammalian system.","code":""},{"path":"https://kharchenkolab.github.io/numbat/articles/mouse.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Mouse tutorial","text":"Gao, T., Soldatov, R., Sarkar, H. et al. Haplotype-aware analysis somatic copy number variations single-cell transcriptomes. Nat Biotechnol (2022). https://doi.org/10.1038/s41587-022-01468-y Keane, T., Goodstadt, L., Danecek, P. et al. Mouse genomic variation effect phenotypes gene regulation. Nature 477, 289–294 (2011). https://doi.org/10.1038/nature10413 Lilue, J., Doran, .G., Fiddes, .T. et al. Sixteen diverse laboratory mouse reference genomes define strain-specific haplotypes novel functional loci. Nat Genet 50, 1574–1583 (2018). https://doi.org/10.1038/s41588-018-0223-8 Kenneth L. Pitter, et al. Systematic Comparison Pancreatic Ductal Adenocarcinoma Models Identifies Conserved Highly Plastic Basal Cell State. Cancer Res 1 October 2022; 82 (19): 3549–3560. https://doi.org/10.1158/0008-5472.CAN-22-1742","code":""},{"path":"https://kharchenkolab.github.io/numbat/articles/numbat-multiome.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Preparing Inputs for Numbat-multiome","text":"vignette provides guide preparing input data running Numbat-multiome. extends capabilities Numbat perform CNV inference accessible chromatin profiles (scATAC-seq data) alone, combined scRNA-seq integrated manner. core inputs required : Reference feature matrix: feature (gene genomic bin) cell‑type normalized count matrix. GTF file: annotation mapping features genomic locations, used connect SNPs features. Feature count matrix: raw count matrix (RNA: cell--gene/bin matrix filled integer counts UMI barcodes; ATAC: cell--bin matrix filled aggregated integer counts individual Tn5-accessible chromatin fragments, defined unique combination chromosome:start-end genomic coordinates). Phased SNP genotype data: single‑cell phased genotype SNP (TSV.GZ). document covers two preparation modes: Combined-bin: Joint RNA ATAC CNV analysis using binned inputs. ATAC-bin: ATAC‑based CNV analysis using binned accessibility data.","code":""},{"path":[]},{"path":"https://kharchenkolab.github.io/numbat/articles/numbat-multiome.html","id":"prepare-snp-allele-data-for-both-modalities","dir":"Articles","previous_headings":"Combined-bin: Combined RNA and ATAC CNV analysis","what":"1. Prepare SNP allele data for both modalities","title":"Preparing Inputs for Numbat-multiome","text":"","code":"nc=8 # number of cores to use sample=\"MM1\" ### default to path in numbat image phase_panel=\"/data/1000G_hg38\" vcf_genome1k=\"/data/genome1K.phase3.SNP_AF5e2.chr1toX.hg38.vcf\" gma_gz=\"/Eagle_v2.4.1/tables/genetic_map_hg38_withX.txt.gz\"  Rscript pileup_and_phase.R \\   --label ${sample} \\   --samples ${sample} \\   --bams ${sample}_rna.bam,${sample}_atac.bam \\   --barcodes ${sample}_rna_barcodes.tsv,${sample}_atac_barcodes.tsv \\   --gmap ${gma_gz} \\   --snpvcf ${vcf_genome1k} \\   --paneldir ${phase_panel} \\   --ncores ${nc} \\   --cellTAG CB \\   --UMItag Auto,None \\   --outdir ${sample}/${sample}_comb_allele_counts.tsv.gz"},{"path":[]},{"path":"https://kharchenkolab.github.io/numbat/articles/numbat-multiome.html","id":"generate-gene-to-bin-mapping","dir":"Articles","previous_headings":"Combined-bin: Combined RNA and ATAC CNV analysis > 2. Prepare binned RNA & ATAC inputs","what":"Generate gene-to-bin mapping","title":"Preparing Inputs for Numbat-multiome","text":", can either supply gtf-format file customized version, prefer using default numbat gtf files, can simply use hg38, hg19 mm10 numbatGTFname argument.","code":"binGR=\"var220kb.rds\" # path to grange object containing genomic bins gtfF=\"gtf_hg38.gtf\" # any version of gtf files you use or hg38, hg19 or mm10  Rscript get_gene_binned_intersections.R \\   --numbatGTFname ${gtfF} \\    --binGR ${binGR} \\   --outfile gene2bin_map.csv"},{"path":"https://kharchenkolab.github.io/numbat/articles/numbat-multiome.html","id":"generate-binned-expression-counts","dir":"Articles","previous_headings":"Combined-bin: Combined RNA and ATAC CNV analysis > 2. Prepare binned RNA & ATAC inputs","what":"Generate binned expression counts","title":"Preparing Inputs for Numbat-multiome","text":"","code":"binGR=\"var220kb.rds\" Rscript get_binned_rna.R \\   --rnaCountsFile ${sample}_seu.rds \\   --outFile ${sample}/${sample}_rna_bin.rds \\   --barcodesKeep ${sample}_barcodes.tsv \\   --geneBinMapCSVFile gene2bin_map.csv"},{"path":"https://kharchenkolab.github.io/numbat/articles/numbat-multiome.html","id":"generate-binned-atac-counts","dir":"Articles","previous_headings":"Combined-bin: Combined RNA and ATAC CNV analysis > 2. Prepare binned RNA & ATAC inputs","what":"Generate binned ATAC counts","title":"Preparing Inputs for Numbat-multiome","text":"","code":"Rscript get_binned_atac.R \\   --CB ${sample}_atac_barcodes.tsv \\   --frag ${sample}_fragments.tsv.gz \\   --binGR ${binGR} \\   --outFile ${sample}/${sample}_atac_bin.rds"},{"path":"https://kharchenkolab.github.io/numbat/articles/numbat-multiome.html","id":"generate-combined-count-matrix","dir":"Articles","previous_headings":"Combined-bin: Combined RNA and ATAC CNV analysis > 2. Prepare binned RNA & ATAC inputs","what":"Generate combined count matrix","title":"Preparing Inputs for Numbat-multiome","text":"can load interactive R session terminal open IDEs apply function binCnt() combines binned RNA ATAC count matrices single matrix also subsampling cells maximum 10,000 cells per modality, can specify seed maximum allowed cell number parameters.","code":"source(\"input_prep.R\") saveRDS(binCnt(c(glue(\"${sample}/{sample}_rna_bin.rds\"),         glue(\"${sample}/{sample}_atac_bin.rds\")),seed=123,maxCB=10000),         glue(\"{sample}/{sample}_comb_bincnt.rds\"))"},{"path":"https://kharchenkolab.github.io/numbat/articles/numbat-multiome.html","id":"generate-combined-reference","dir":"Articles","previous_headings":"Combined-bin: Combined RNA and ATAC CNV analysis","what":"3. Generate combined reference","title":"Preparing Inputs for Numbat-multiome","text":"generated binned counts scRNA-seq scATAC-seq data normal samples. relatively high number cells multiple normal samples, may consider running agg_refs, wrapper function original aggrerate_count() function numbat subsampling max number cells normal sample. First can set array normal samples iterate bash array Specify refsamples vector normal sample names, e.g., refsamples <- c(\"normal1\", \"normal2\", \"normal3\"). run following R code aggregate references: separately generating binned RNA ATAC reference, can combine single reference.","code":"binGR=\"var220kb.rds\" refsample=\"normal1\"  Rscript get_binned_rna.R \\   --rnaCountsFile ref_seu.rds \\   --outFile Reference/lambdas_RNA_bincnt.rds \\   --barcodesKeep ref_barcodes.tsv \\   --geneBinMapCSVFile gene2bin_map.csv \\   --generateAggRef    Rscript get_binned_atac.R \\   --CB ${refsample}_atac_barcodes.tsv \\   --frag ${refsample}_fragments.tsv.gz \\   --binGR $binGR \\   --outFile  Reference/lambdas_RNA_bincnt.rds \\   --generateAggRef # Define array of normal sample names normal_samples=(\"normal1\" \"normal2\" \"normal3\")  # <-- Replace with your sample names  # Path to shared binGR file binGR=\"var220kb.rds\"  # Loop through each sample for refsample in \"${normal_samples[@]}\"; do   echo \"Processing $refsample...\"    Rscript get_binned_atac.R \\     --CB \"${refsample}_atac_barcodes.tsv\" \\     --frag \"${refsample}_fragments.tsv.gz\" \\     --binGR \"$binGR\" \\     --outFile \"${refsample}/${refsample}_atac_bin.rds\" done source(\"input_prep.R\") ref_atac <- agg_refs(   paste0(refsamples,\"/\",refsamples,\"_atac_bin.rds\") %>%   set_names(refsamples)) %>%    saveRDS(\"Reference/lambdas_ATAC_bincnt.rds\") ref_rna <- readRDS(\"Reference/lambdas_RNA_bincnt.rds\") ref_atac <- readRDS(\"Reference/lambdas_ATAC_bincnt.rds\") shared <- intersect(rownames(ref_rna), rownames(ref_atac)) ref_comb <- cbind(ref_rna[shared, ], ref_atac[shared, ]) saveRDS(ref_comb, \"Reference/lambdas_comb_bincnt.rds\")"},{"path":"https://kharchenkolab.github.io/numbat/articles/numbat-multiome.html","id":"run-numbat-inference-with-prepared-inputs","dir":"Articles","previous_headings":"Combined-bin: Combined RNA and ATAC CNV analysis","what":"Run numbat inference with prepared inputs","title":"Preparing Inputs for Numbat-multiome","text":"","code":"binGR=\"var220kb.rds\" parL=\"par_numbatm.rds\" # a list of any run_numbat parameters you would like to optimize Rscript run_numbat_multiome.R  \\             --countmat ${sample}/${sample}_comb_bincnt.rds \\             --alleledf ${sample}/${sample}_comb_allele_counts.tsv.gz \\             --out_dir ${sample}/paired/ \\             --ref Reference/lambdas_comb_bincnt.rds \\             --gtf  ${binGR}\\             --parL ${parL}"},{"path":"https://kharchenkolab.github.io/numbat/articles/numbat-multiome.html","id":"atac-bin-and-rna-bin-modes","dir":"Articles","previous_headings":"","what":"ATAC-bin and RNA-bin modes","title":"Preparing Inputs for Numbat-multiome","text":"want run Numbat-multiome RNA bin ATAC bin modes, can simply use lambdas_RNA_bincnt.rds lambdas_ATAC_bincnt.rds reference files. ${sample}_rna_bin.rds ${sample}_atac_bin.tsv count matrix.","code":""},{"path":"https://kharchenkolab.github.io/numbat/articles/numbat-multiome.html","id":"atac-bin-mode","dir":"Articles","previous_headings":"ATAC-bin and RNA-bin modes","what":"ATAC-bin mode","title":"Preparing Inputs for Numbat-multiome","text":"ATAC-bin mode perform CNV inference using binned ATAC counts ATAC reference. Inputs Count matrix: ${sample}_atac_bin.rds (.tsv) get_binned_atac.R Reference: Reference/lambdas_ATAC_bincnt.rds (generated via get_binned_atac.R --generateAggRef agg_refs()) Allele VCF: ${sample}/${sample}_comb_allele_counts.tsv.gz Genomic bins: var220kb.rds GRanges object Command --mode ATAC-bin skips RNA likelihoods relies solely ATAC signals. Interpretation CNV calls driven chromatin-accessibility patterns. Ideal RNA data unavailable comparison Combined-bin.","code":"Rscript run_numbat_multiome.R \\   --countmat    ${sample}/${sample}_atac_bin.rds \\   --alleledf     ${sample}/${sample}_comb_allele_counts.tsv.gz \\   --out_dir     ${sample}/atac_only/ \\   --ref         Reference/lambdas_ATAC_bincnt.rds \\   --gtf         var220kb.rds \\   --parL        par_numbatm.rds"},{"path":"https://kharchenkolab.github.io/numbat/articles/numbat-multiome.html","id":"rna-bin-mode","dir":"Articles","previous_headings":"ATAC-bin and RNA-bin modes","what":"RNA-bin mode","title":"Preparing Inputs for Numbat-multiome","text":"RNA-bin mode leverage binned RNA counts plus RNA reference: Use ATAC coverage low benchmark RNA-CNV calls.","code":"Rscript run_numbat_multiome.R \\   --countmat    ${sample}/${sample}_rna_bin.rds \\   --alleledf     ${sample}/${sample}_comb_allele_counts.tsv.gz \\   --out_dir     ${sample}/rna_only/ \\   --ref         Reference/lambdas_RNA_bincnt.rds \\   --gtf         var220kb.rds \\   --parL        par_numbatm.rds"},{"path":"https://kharchenkolab.github.io/numbat/articles/numbat.html","id":"table-of-contents","dir":"Articles","previous_headings":"","what":"Table of contents","title":"","text":"Docker Preparing data Run parameters Detecting clonal LOH Using existing CNV calls Understanding results Using prephased SNP profiles Spatial data Mouse data FAQ","code":""},{"path":"https://kharchenkolab.github.io/numbat/articles/numbat.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"","text":"now provide ready--run Docker container includes package prerequisites (see section Docker). Alternatively, can follow installation procedure . Numbat uses cellsnp-lite generating SNP pileup data eagle2 phasing. Please follow installation instructions make sure binary executables can found $PATH. cellsnp-lite eagle2 samtools Additionally, Numbat needs common SNP VCF phasing reference panel. can use 1000 Genome reference : 1000G SNP VCF 1000G Reference Panel (paste link browser download wget isn’t working) can install numbat R package via CRAN: Alternatively, can install GitHub version:","code":"# hg38 wget https://sourceforge.net/projects/cellsnp/files/SNPlist/genome1K.phase3.SNP_AF5e2.chr1toX.hg38.vcf.gz # hg19 wget https://sourceforge.net/projects/cellsnp/files/SNPlist/genome1K.phase3.SNP_AF5e2.chr1toX.hg19.vcf.gz # hg38 wget http://pklab.med.harvard.edu/teng/data/1000G_hg38.zip # hg19 wget http://pklab.med.harvard.edu/teng/data/1000G_hg19.zip install.packages('numbat', dependencies = TRUE) devtools::install_github(\"https://github.com/kharchenkolab/numbat\")"},{"path":"https://kharchenkolab.github.io/numbat/articles/numbat.html","id":"docker","dir":"Articles","previous_headings":"Installation","what":"Docker","title":"","text":"provide ready--run Docker container includes Numbat R package dependencies. can launch follows: /work local data folder like access write . Within container, cellsnp-lite, eagle2 samtools available path 1000 Genome SNP VCF phasing panel files (hg38) stored /data. can also launch R run interactive analysis using Numbat (run R script).","code":"docker run -v /work:/mnt/mydata -it pkharchenkolab/numbat-rbase:latest /bin/bash"},{"path":"https://kharchenkolab.github.io/numbat/articles/numbat.html","id":"preparing-data","dir":"Articles","previous_headings":"","what":"Preparing data","title":"","text":"Prepare allele data. Run preprocessing script (numbat/inst/bin/pileup_and_phase.R) count alleles phase SNPs. example, within Numbat Docker container can run preprocessing script like : Important: 10x bam multiplexed (containing cells multiple individuals), please provide cell barcodes single individual genotyping run. produce file named {sample}_allele_counts.tsv.gz specified output directory, contains cell-level phased allele counts. contains columns cell, snp_id, CHROM, POS, cM (genetic distance centimorgan), REF, ALT, AD (ALT allele count), DP (total allele count), GT (phased genotype), gene. multiple samples individual provided, one allele count file sample. outputs include phased vcfs phasing/ folder raw pileup counts pileup/. Prepare expression data. Numbat takes gene cell integer UMI count matrix input. can directly use results upstream transcriptome quantification pipelines 10x CellRanger. Prepare expression reference, gene cell type matrix normalized expression values (raw gene counts divided total counts). quick start, may use HCA collection (ref_hca) ships package. matched normal cells (ideally, various cell type) patient dataset like make references, may use utility function:","code":"usage: pileup_and_phase.R [-h] --label LABEL --samples SAMPLES --bams BAMS                           [--barcodes BARCODES] --gmap GMAP [--eagle EAGLE]                           --snpvcf SNPVCF --paneldir PANELDIR --outdir OUTDIR                           --ncores NCORES [--UMItag UMITAG]                           [--cellTAG CELLTAG] [--smartseq] [--bulk]  Run SNP pileup and phasing with 1000G  Arguments:   -h, --help           show this help message and exit   --label LABEL        Individual label. One per run.   --samples SAMPLES    Sample name(s); comma delimited if multiple.                         All samples must belong to the same individual.   --bams BAMS          BAM file(s); one per sample, comma delimited if multiple.   --barcodes BARCODES  Cell barcode file(s); one per sample,                         comma delimited if multiple.   --gmap GMAP          Path to genetic map provided by Eagle2 (e.g.                        Eagle_v2.4.1/tables/genetic_map_hg38_withX.txt.gz)   --eagle EAGLE        Path to Eagle2 binary file   --snpvcf SNPVCF      SNP VCF for pileup   --paneldir PANELDIR  Directory to phasing reference panel (BCF files)   --outdir OUTDIR      Output directory   --ncores NCORES      Number of cores   --smartseq           Running with SMART-seq mode; Supply a txt file containing                         directories of BAM files to --bams and a txt file                         containing cell names to --barcodes (each entry on its                         own line for both; ordering must match). Rscript /numbat/inst/bin/pileup_and_phase.R \\     --label {sample} \\     --samples {sample} \\     --bams /mnt/mydata/{sample}.bam \\     --barcodes /mnt/mydata/{sample}_barcodes.tsv \\     --outdir /mnt/mydata/{sample} \\     --gmap /Eagle_v2.4.1/tables/genetic_map_hg38_withX.txt.gz \\     --snpvcf /data/genome1K.phase3.SNP_AF5e2.chr1toX.hg38.vcf \\     --paneldir /data/1000G_hg38 \\     --ncores ncores # count_mat is a gene x cell raw count matrices # cell_annot is a dataframe with columns \"cell\" and \"group\" ref_internal = aggregate_counts(count_mat, cell_annot)"},{"path":"https://kharchenkolab.github.io/numbat/articles/numbat.html","id":"running-numbat","dir":"Articles","previous_headings":"","what":"Running Numbat","title":"","text":"example (ATC2 Gao et al), gene expression count matrix allele dataframe already prepared . Note: wish use custom reference, please use aggregate_counts function per example preparing data. need include reference cells count_mat df_allele; provide lambdas_ref.","code":"library(numbat)  count_mat_ATC2 = readRDS(url('http://pklab.med.harvard.edu/teng/data/count_mat_ATC2.rds')) df_allele_ATC2 = readRDS(url('http://pklab.med.harvard.edu/teng/data/df_allele_ATC2.rds'))  # run out = run_numbat(     count_mat_ATC2, # gene x cell integer UMI count matrix      ref_hca, # reference expression profile, a gene x cell type normalized expression level matrix     df_allele_ATC2, # allele dataframe generated by pileup_and_phase script     genome = \"hg38\",     t = 1e-5,     ncores = 4,     plot = TRUE,     out_dir = './test' )"},{"path":"https://kharchenkolab.github.io/numbat/articles/numbat.html","id":"run-parameters","dir":"Articles","previous_headings":"Running Numbat","what":"Run parameters","title":"","text":"parameters can consider tuning specific dataset. CNV detection t: transition probability used HMM. lower t appropriate tumors complex copy number landscapes (can expect breakpoints) sometimes better detecting subclonal events. higher t effective controlling false-positive rates CNV calls. gamma: Overdispersion allele counts (default: 20). 10x data, 20 recommended. Non-UMI protocols (e.g. SMART-Seq) usually produce noisier allele data, smaller value gamma recommended (e.g. 5). min_cells: minimum number cells pseudobulk HMM run. allele coverage per cell sparse dataset, consider setting threshold higher. multi_allelic: Whether enable calling multiallelic CNVs CNV filtering min_LLR: minimum log-likelihood ratio threshold filter CNVs (default: 5). ensure quality phylogeny inference, use confident CNVs reconstruct phylogeny. max_entropy: another criteria use filter CNVs phylogeny construction (default: 0.5). entropy binary posterior quantifies uncertainty event across single cells. value can 0 1 1 least stringent. Phylogeny n_cut: Number cuts phylogeny define subclones. Note n cuts result n+1 clones (top-level normal diploid clone always included). Alternatively, one can specify max_cost tau control number subclones. max_cost: Likelihood threshold collapse internal branches. Higher max_cost generally leads fewer clones. tau: Stringency simplify mutational history. Basically sets max_cost tau times number cells. Iterative optimization init_k: initial number subclusters use hclust initialization. Numbat default uses hierarchical clustering (hclust) smoothed expression values approximate initial phylogeny. cut initial tree k clusters. clusters means resolution initial stage subclonal CNV detection. default, set init_k 3. max_iter: maximum number iterations. Numbat iteratively optimizes phylogeny copy number estimations. practice, find results 2 iterations usually stable. check_convergence: stop iterating results converged (based consensus CNV segments). Parallelization ncores: number cores use single-cell CNV testing ncores_nni: number cores use phylogeny inference run modes call_clonal_loh: whether call clonal LOH regions. Recommended samples high purity without matched normal cells. See Detecting clonal LOH details. segs_consensus_fix: dataframe pre-determined consensus CNVs (example, bulk WGS/WES analysis) stay fixed analysis. See Using existing CNV calls details.","code":""},{"path":"https://kharchenkolab.github.io/numbat/articles/numbat.html","id":"detecting-clonal-loh","dir":"Articles","previous_headings":"Running Numbat","what":"Detecting clonal LOH","title":"","text":"samples high tumor purity (e.g., tumor cell lines) without matched normal cells, heterozygous SNPs challenging identify regions LoH, leading decreased power CNV detection. Regions clonal LoH decreased SNP density can identified specialized HMM (see detect_clonal_loh function reference). can set call_clonal_loh = TRUE automatically identify exclude regions clonal deletions/LoH main workflow. Alternatively, can manually run detect_clonal_loh provide detected segments dataframe (columns CHROM, seg, seg_start, seg_end) via segs_loh argument. addition, matched DNA data (e.g. WGS/WES) individual, can directly use SNP profile genotyped DNA, avoid problem. See Using prephased SNP profiles details.","code":""},{"path":"https://kharchenkolab.github.io/numbat/articles/numbat.html","id":"using-existing-cnv-calls","dir":"Articles","previous_headings":"Running Numbat","what":"Using existing CNV calls","title":"","text":"Sometimes users already CNV calls bulk WGS, WES, array analysis. case, can supply existing CNV profile via segs_consensus_fix parameter fix CNV boundaries states. , may provide dataframe following columns: CHROM: integer; chromosome (1-22) seg: character; segment ID (e.g. 1a, 1b, 2a, 2b, etc.) seg_start: integer; segment start position seg_end: integer; segment end position cnv_state: character; copy number state (neu, del, amp, loh, bamp, bdel) Please note diploid segments (cnv_state = \"neu\") also included (.e. segs_consensus_fix complete copy number profile including chromosomes).","code":""},{"path":"https://kharchenkolab.github.io/numbat/articles/numbat.html","id":"understanding-results","dir":"Articles","previous_headings":"","what":"Understanding results","title":"","text":"detailed vignette interpret visualize Numbat results available: Interpreting Numbat results full list output files column descriptions, please see: Output descriptions","code":""},{"path":"https://kharchenkolab.github.io/numbat/articles/numbat.html","id":"phasing-options","dir":"Articles","previous_headings":"","what":"Phasing options","title":"","text":"CNV detection power Numbat can enhanced conducting population-based phasing larger diverse reference panel (.e. reference haplotypes). default pipeline uses 1000 Genome panel, contains genotypes 2,504 individuals. Larger reference panels include: gnomAD HGDP + 1KG panel (n=4,099). can download reference files using gsutil: gs://gcp-public-data--gnomad/resources/hgdp_1kg/phased_haplotypes. TOPMed panel (n=97,256). can upload VCF TOPMed imputation server.","code":""},{"path":"https://kharchenkolab.github.io/numbat/articles/numbat.html","id":"using-prephased-snp-profiles","dir":"Articles","previous_headings":"Phasing options","what":"Using prephased SNP profiles","title":"","text":"Using DNA-derived genotype information another way improve SNP density phasing. SNP calls DNA genotyping (e.g. WGS/WES), can first perform phasing DNA-derived VCF. run cellsnp-lite scRNA-seq BAMs DNA-derived VCF generate allele counts (include heterozygous SNPs). Finally, merge phased GT fields (phased DNA-derived VCF) obtained allele counts produce allele dataframe format df_allele (see section Preparing data).","code":""},{"path":"https://kharchenkolab.github.io/numbat/articles/numbat.html","id":"spatial-data","dir":"Articles","previous_headings":"","what":"Spatial data","title":"","text":"Numbat can also used analyze spatial transcriptomics (e.g. 10x Visium) data. Please see spatial tutorial details.","code":""},{"path":"https://kharchenkolab.github.io/numbat/articles/numbat.html","id":"mouse-data","dir":"Articles","previous_headings":"","what":"Mouse data","title":"","text":"Numbat (v1.2.0) now works F1 hybrid mouse bred two known lab mice strains. details available mouse tutorial.","code":""},{"path":"https://kharchenkolab.github.io/numbat/articles/numbat.html","id":"faq","dir":"Articles","previous_headings":"","what":"FAQ","title":"","text":"Q: expression reference impact analysis? : expression reference (lambdas_ref) used regress cell-type-specific expression differences unrelated CNVs. used single-cell testing pseudobulk CNV calling using HMM. Ideally, expression reference created normal (non-tumor) dataset closely matching biological technical conditions target dataset (e.g., tissue types, cell types, sequencing platforms). closely matching reference can help reduce noise expression-based CNV signal (logFC) pseudobulk single-cell analysis. Q: expect certain CNV particular sample, detected Numbat. : general, three scenarios CNV called. CNV called pseudobulk HMM. can check bulk_subtrees_*.png see event called. , suggest trying find better expression reference reduce noise logFC, changing parameters used configure HMM (gamma, t, etc). Sometimes CNV subclonal isolated pseudobulk initial clustering. can see case looking exp_roll_clust.png , try increasing k_init. CNV called pseudobulks appear segs_consensus_*.tsv joint_post_*tsv. event filtered due low LLR. Lowering min_LLR threshold help. CNV called pseudobulks, present segs_consensus_*.tsv joint_post_*tsv, appear phylogeny. event filtered due high entropy (weak evidence) single cells. Raising max_entropy threshold help. can check entropy specific events joint_post_*tsv column avg_entropy. Q: Numbat predicts genome amplified, gaps pseudobulk allele profile heterozygous SNPs. : sign sample consists mostly tumor (normal cells), clonal deletions present. heterozygous SNPs identified regions, therefore leaving gaps. can identify clonally deleted regions via SNP-density HMM prior running main run_numbat workflow (see section Detecting Clonal LOH). Q: seems global baseline shift CNV profile produced Numbat compared CNV callers; specifically, Numbat calls gains segments appear neutral analyses, neutral segments appear losses. : Many existing methods (e.g. InferCNV/CopyKAT) infer copy number variations relative median ploidy, can dilute signals aberrant regions mistake neutral regions aberrant due baseline shifts caused hyperdiploidy hypodiploidy. Instead, Numbat first tries identify diploid regions based allele evidence (balanced allelic frequencies), uses regions baseline CNV calling. information, please refer publications describing Numbat FACETS.","code":""},{"path":"https://kharchenkolab.github.io/numbat/articles/results.html","id":"copy-number-landscape-and-single-cell-phylogeny","dir":"Articles","previous_headings":"","what":"Copy number landscape and single-cell phylogeny","title":"Interpreting Numbat results","text":"overview, can visualize CNV calls single-cells evolutionary relationships integrated plot panel: visualization, single-cell phylogeny (left) juxtaposed heatmap single-cell CNV calls (right). CNV calls colored type alterations (AMP, amplification, BAMP, balanced amplification, DEL, deletion, CNLoH, copy-neutral loss heterozygosity). colorbar -differentiates distinct genetic populations (genotype). dashed blue line separates predicted tumor versus normal cells. tells us dataset mainly consists three cell populations, normal population (gray) two tumor subclones (green purple).","code":"mypal = c('1' = 'gray', '2' = \"#377EB8\", '3' = \"#4DAF4A\", '4' = \"#984EA3\")    nb$plot_phylo_heatmap(   clone_bar = TRUE,    p_min = 0.9,   pal_clone = mypal )"},{"path":"https://kharchenkolab.github.io/numbat/articles/results.html","id":"refine-subclones-on-the-phylogeny","dir":"Articles","previous_headings":"Copy number landscape and single-cell phylogeny","what":"Refine subclones on the phylogeny","title":"Interpreting Numbat results","text":"Note number subclones determined initial run parameters run_numbat can re-adjusted using nb$cutree():  cutree one can either specify n_cut max_cost, work similarly k h stats::cutree. Note n cuts result n+1 clones (top-level normal diploid clone always included). First cut separate tumor cells single clone, second cut gives two tumor subclones, . Alternatively, one can specify max_cost, maximum likelihood cost threshold reduce phylogeny (higher max_cost leads fewer clones). refining subclones phylogeny, can recreate clone pseduobulk profiles visualize (see issue #220).","code":"plots = lapply(     1:4,     function(k) {         nb$cutree(n_cut = k)         nb$plot_phylo_heatmap() + ggtitle(paste0('n_cut=', k))     } ) wrap_plots(plots) # restore to original number of cuts nb$cutree(n_cut = 3)"},{"path":"https://kharchenkolab.github.io/numbat/articles/results.html","id":"consensus-copy-number-segments","dir":"Articles","previous_headings":"","what":"Consensus copy number segments","title":"Interpreting Numbat results","text":"Let’s take look consensus segments.","code":"nb$plot_consensus()"},{"path":"https://kharchenkolab.github.io/numbat/articles/results.html","id":"bulk-cnv-profiles","dir":"Articles","previous_headings":"","what":"Bulk CNV profiles","title":"Interpreting Numbat results","text":"can also visualize CNV events pseudobulks data rich, aggregating cells clone:","code":"nb$bulk_clones %>%    filter(n_cells > 50) %>%   plot_bulks(     min_LLR = 10, # filtering CNVs by evidence     legend = TRUE   )"},{"path":"https://kharchenkolab.github.io/numbat/articles/results.html","id":"single-cell-cnv-calls","dir":"Articles","previous_headings":"","what":"Single-cell CNV calls","title":"Interpreting Numbat results","text":"Numbat probabilistically evaluates presence/absence CNVs single cells. cell-level CNV posteriors stored nb$joint_post dataframe: contains cell-level information specific CNV segments (seg), alteration type (cnv_state), joint posterior probability CNV (p_cnv), expression-based posterior (p_cnv_x), allele-based posterior (p_cnv_y). can visualize event-specific posteriors expression-based tSNE embedding:","code":"head(nb$joint_post) %>% select(cell, CHROM, seg, cnv_state, p_cnv, p_cnv_x, p_cnv_y) ##                        cell  CHROM    seg cnv_state        p_cnv     p_cnv_x ##                      <char> <fctr> <char>    <char>        <num>       <num> ## 1: TNBC1_AAACCTGCACCTTGTC-1      1     1b       amp 0.9999999997 1.000000000 ## 2: TNBC1_AAACCTGCACCTTGTC-1      2     2a       amp 0.0002288397 0.001172894 ## 3: TNBC1_AAACCTGCACCTTGTC-1      3     3a       amp 0.0522751360 0.052273344 ## 4: TNBC1_AAACCTGCACCTTGTC-1      3     3c       amp 0.9147696618 0.982278728 ## 5: TNBC1_AAACCTGCACCTTGTC-1      4     4b       amp 0.8999658266 0.845619643 ## 6: TNBC1_AAACCTGCACCTTGTC-1      5     5a       amp 0.8070027725 0.778074328 ##       p_cnv_y ##         <num> ## 1: 0.03844235 ## 2: 0.09821435 ## 3: 0.50000000 ## 4: 0.10246769 ## 5: 0.61862288 ## 6: 0.53344303 plist = list() muts = c('1a', '3b', '22b') cnv_type = nb$joint_post %>% distinct(seg, cnv_state) %>% {setNames(.$cnv_state, .$seg)} for (mut in muts) {          plist[[mut]] = pagoda$plotEmbedding(         alpha=0.8,         size=1,          plot.na = F,          colors = nb$joint_post %>%             filter(seg == mut) %>%             {setNames(.$p_cnv, .$cell)},         show.legend = T,         mark.groups = F,         plot.theme = theme_bw(),         title = paste0(mut, '(', cnv_type[muts], ')')     ) +     scale_color_gradient2(low = 'royalblue', mid = 'white', high = 'red3', midpoint = 0.5, limits = c(0,1), name = 'Posterior') } wrap_plots(plist, guides = 'collect')"},{"path":"https://kharchenkolab.github.io/numbat/articles/results.html","id":"clonal-assignments","dir":"Articles","previous_headings":"","what":"Clonal assignments","title":"Interpreting Numbat results","text":"Numbat aggregates signals across subclone-specific CNVs probabilistically assign cells subclones. information regarding clonal assignments contained nb$clone_post dataframe. clone_opt denotes maximum likelihood assignment cell specific clone. p_{1..4} detailed breakdown posterior probability cell belongs clone, respectively. Let’s visualize clonal decomposition tSNE embedding. Note clone 1 always normal cells.","code":"nb$clone_post %>% head() %>% select(cell, clone_opt, p_1, p_2, p_3, p_4) ##                       cell clone_opt           p_1          p_2          p_3 ## 1 TNBC1_AAACCTGCACCTTGTC-1         4  1.162495e-72 2.105425e-20 3.478936e-29 ## 2 TNBC1_AAACGGGAGTCCTCCT-1         1  1.000000e+00 5.814741e-51 5.920463e-95 ## 3 TNBC1_AAACGGGTCCAGAGGA-1         4 2.434561e-100 2.175022e-14 2.085718e-30 ## 4 TNBC1_AAAGATGCAGTTTACG-1         3  2.020088e-23 8.164920e-04 9.913458e-01 ## 5 TNBC1_AAAGCAACAGGAATGC-1         4  9.546324e-64 4.989037e-11 1.657378e-31 ## 6 TNBC1_AAAGCAATCGGAATCT-1         3  1.516589e-99 8.466806e-33 1.000000e+00 ##            p_4 ## 1 1.000000e+00 ## 2 8.821034e-66 ## 3 1.000000e+00 ## 4 7.837745e-03 ## 5 1.000000e+00 ## 6 2.457592e-29 pagoda$plotEmbedding(     alpha=0.8,     size=1,      groups = nb$clone_post %>%         {setNames(.$clone_opt, .$cell)},     plot.na = F,     plot.theme = theme_bw(),     title = 'Genotypes',     pal = mypal )"},{"path":"https://kharchenkolab.github.io/numbat/articles/results.html","id":"tumor-versus-normal-probability","dir":"Articles","previous_headings":"","what":"Tumor versus normal probability","title":"Interpreting Numbat results","text":"Combining evidence CNVs, Numbat derives aneuploidy probability cell distinguish tumor versus normal cells. can visualize posterior aneuploidy probability based expression evidence , allele evidence , jointly: expression allele signal clearly separate tumor normal cells.","code":"p_joint = pagoda$plotEmbedding(     alpha=0.8,     size=1,      colors = nb$clone_post %>%         {setNames(.$p_cnv, .$cell)},     plot.na = F,     plot.theme = theme_bw(),     title = 'Joint', ) + scale_color_gradient2(low = 'royalblue', mid = 'white', high = 'red3', midpoint = 0.5, name = 'Posterior') p_allele = pagoda$plotEmbedding(     alpha=0.8,     size=1,      colors = nb$clone_post %>%         {setNames(.$p_cnv_x, .$cell)},     plot.na = F,     plot.theme = theme_bw(),     title = 'Expression', ) + scale_color_gradient2(low = 'royalblue', mid = 'white', high = 'red3', midpoint = 0.5, name = 'Posterior') p_expr = pagoda$plotEmbedding(     alpha=0.8,     size=1,      colors = nb$clone_post %>%         {setNames(.$p_cnv_y, .$cell)},     plot.na = F,     show.legend = T,     plot.theme = theme_bw(),     title = 'Allele', ) + scale_color_gradient2(low = 'royalblue', mid = 'white', high = 'red3', midpoint = 0.5, name = 'Posterior') (p_expr | p_allele | p_joint) + plot_layout(guides = 'collect')"},{"path":"https://kharchenkolab.github.io/numbat/articles/results.html","id":"tumor-phylogeny","dir":"Articles","previous_headings":"","what":"Tumor phylogeny","title":"Interpreting Numbat results","text":"Let’s take closer look inferred single cell phylogeny mutations occurred. mutational history can also represented clone level, cells genotype aggregated one node.","code":"nb$plot_sc_tree(   label_size = 3,    branch_width = 0.5,    tip_length = 0.5,   pal_clone = mypal,    tip = TRUE ) nb$plot_mut_history(pal = mypal)"},{"path":"https://kharchenkolab.github.io/numbat/articles/spatial-rna.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Spatial transcriptomics","text":"Spatial transcriptomics (ST) assays provide ideal opportunity characterize spatial architecture tumor well cell-cell interactions within tumor microenvironment. transcriptomic information, CNV analysis can applied resolve genetic subclones spatial context [1,2]. particular, many sequencing-based ST assays (e.g. Visium fresh frozen Slide-seq) capture expression allele information, thus amenable allele-specific CNV analysis. Unlike single-cell sequencing, measurements spatial assays often mixture cells (.e. “spots”). mixtures can potentially consist tumor normal cells (stromal/immune) well different tumor subclones distinct genotypes. Originally developed scRNA-seq data, Numbat makes several assumptions model based single-cell nature measurements. However, willing accept assumption spots ST contain cells clone (genetic homogeneity within spot), Numbat applicable ST data. Whether assumption reasonable likely depends technology (example, Visium spots typically contain 1-10 cells, whereas Slide-seqV2 near single-cell resolution) well tissue architecture (tissues well-mixed others). worth noting existing spatial CNV calling methods STARCH [3] also make assumption. Furthermore, future generations ST assays likely achieve single-cell resolution soon. 10x Visium one widely used ST platforms, vignette dedicated application Numbat perform allele-specific CNV analysis Visium data. Recently published data Barkely et al [1] (downloadable GSE203612) used illustration.","code":""},{"path":"https://kharchenkolab.github.io/numbat/articles/spatial-rna.html","id":"preparing-data","dir":"Articles","previous_headings":"","what":"Preparing data","title":"Spatial transcriptomics","text":"outputs 10x SpaceRanger (BAM, barcode list, gene expression quantification) format CellRanger, pileup--phase procedure can used prepare allele counts expression count matrices Visium data scRNA-seq. Compared scRNA-seq, overall SNP coverage Visium typically sparse, may impact phasing quality. Therefore, priori genotyping DNA co-genotyping scRNA-seq (via multi-sample mode pileup--phase) especially useful. terms expression references, reasonable choices include Visium scRNA-seq data matching normal tissues (e.g. normal prostate reference prostate cancer samples). Visium data, one can first cluster spots (e.g. using pagoda2) collapse counts clusters (using numbat::aggregate_counts). Visium, Visium data usually make better reference scRNA-seq data, achieving least amount noise. anlaysis, just used clustered spots UCEC3 reference, since sample aneuploidy.","code":""},{"path":"https://kharchenkolab.github.io/numbat/articles/spatial-rna.html","id":"running-analysis","dir":"Articles","previous_headings":"","what":"Running analysis","title":"Spatial transcriptomics","text":"recommended parameters Visium similar scRNA-seq. difference , allele coverage per barcode typically sparser scRNA-seq, max_entropy (quantifies uncertainty CNV posterior individual cells/spots) set higher value 0.8 (default 0.5).","code":""},{"path":[]},{"path":"https://kharchenkolab.github.io/numbat/articles/spatial-rna.html","id":"aneuploidy-probabilities","dir":"Articles","previous_headings":"Results","what":"Aneuploidy probabilities","title":"Spatial transcriptomics","text":"major task ST analysis delineating boundaries malignant normal cells. Aggregating CNV evidence, Numbat outputs mutant versus normal probability (clone_post$p_cnv). provides natural interpretation spots mixture mutant normal cells, show CNV probability around 0.5 (specific value depends mixture fraction). Spots contain purely mutant cells show high CNV probability (near 1) contain purely normal cells show low CNV probability (near 0). Let’s first look mutant versus normal probabilities samples.  Figure 1. Mutant versus normal probabilities. Red represents mutant (aneuploid), green represents normal, yellow represents mixture/uncertain. Overlaying tissue images, can see tumor/normal boundaries coincide visible tissue architecture. Figure 2. Mutant versus normal probabilities overlayed tissue images. Red represents mutant (aneuploid), green represents normal, yellow represents mixture/uncertain.","code":"library(data.table) library(dplyr) library(glue) library(stringr) library(numbat) library(ggplot2)  # read in the numbat results and spot coordinates nb = list() spots = list() samples = c('OVCA1', 'OVCA3', 'BRCA1', 'GIST1') for (sample in samples) {     nb[[sample]] = Numbat$new(glue('~/results/{sample}'))     spots[[sample]] = fread(glue('~/{sample}/outs/spatial/tissue_positions.csv')) } options(repr.plot.width = 8.5, repr.plot.height = 8, repr.plot.res = 300)  lapply(     c('OVCA1', 'OVCA3', 'GIST1', 'BRCA1'),     function(sample) {                  spots[[sample]] %>%             left_join(                 nb[[sample]]$clone_post,                  by = c('barcode' = 'cell')             ) %>%             filter(in_tissue == 1) %>%             ggplot(                 aes(x = array_row, y = array_col)             ) +             geom_point(aes(color = p_cnv), size = 1, alpha = 0.8, pch = 16) +             scale_color_gradient2(                 low = 'darkgreen', high = 'red3', mid = 'yellow',                  midpoint = 0.5, limits = c(0,1), oob = scales::oob_squish             ) +             theme_bw() +             scale_x_continuous(expand = expansion(add = 1), limits = c(0,77)) +             scale_y_continuous(expand = expansion(add = 1), limits = c(0,127)) +             ggtitle(sample)     } ) %>%  wrap_plots(guides = 'collect') options(repr.plot.width = 8.5, repr.plot.height = 8, repr.plot.res = 300)  lapply(     c('OVCA1', 'OVCA3', 'GIST1', 'BRCA1'),     function(sample) {                  img <- jpeg::readJPEG(glue(\"~/visium/nyu/images/{sample}_cropped.jpg\"))          spots[[sample]] %>%             left_join(                 nb[[sample]]$clone_post,                  by = c('barcode' = 'cell')             ) %>%             filter(in_tissue == 1) %>%             ggplot(                 aes(x = array_row, y = array_col)             ) +             background_image(img) +             geom_point(                 aes(color = p_cnv), size = 0.3,                 stroke = 0.3, alpha = 0.8, pch = 21             ) +             scale_color_gradient2(                 low = 'darkgreen', high = 'red3', mid = 'yellow',                  midpoint = 0.5, limits = c(0,1), oob = scales::oob_squish             ) +             theme_bw() +             scale_x_continuous(expand = expansion(add = 1), limits = c(0,77)) +             scale_y_continuous(expand = expansion(add = 1), limits = c(0,127)) +             ggtitle(sample)     } ) %>%  wrap_plots(guides = 'collect')"},{"path":"https://kharchenkolab.github.io/numbat/articles/spatial-rna.html","id":"per-event-cnv-probabilities","dir":"Articles","previous_headings":"Results","what":"Per-event CNV probabilities","title":"Spatial transcriptomics","text":"addition overall aneuploidy probability, Numbat also outputs posterior probability per CNV event spot (joint_post$p_cnv). especially useful resolving tumor subclonal structures. Let’s take BRCA0 example plot per-event CNV probabilities: Figure 3. Probabilities specific CNV events. Red represents high probability event presence, blue represents low probability event presence, white represents mixture/uncertain. see substantial heterogeneity among CNV events spatial distribution. particular, deletions chromosomes 9, 14, 16, 17, 19 22 seem mark specific patches tissue section.","code":"options(repr.plot.width = 11, repr.plot.height = 8, repr.plot.res = 300)  sample = 'BRCA0'  img <- jpeg::readJPEG(glue(\"~/visium/nyu/images/{sample}_cropped.jpg\"))  spots[[sample]] %>%     left_join(         nb[[sample]]$joint_post %>%             filter(LLR > 35 & avg_entropy < 0.6) %>%             group_by(seg) %>%             mutate(p_total = sum(p_cnv)) %>%             ungroup() %>%             arrange(-p_total) %>%             mutate(seg = paste0(seg, '(', cnv_state, ')')) %>%             mutate(seg = factor(seg, unique(seg))),          by = c('barcode' = 'cell')     ) %>%     filter(in_tissue == 1) %>%     ggplot(         aes(x = array_row, y = array_col)     ) +     geom_point(aes(color = p_cnv), size = 0.1, stroke = 0.5, alpha = 1) +     scale_color_gradient2(         low = 'blue', high = 'red3', mid = 'white',         midpoint = 0.5, limits = c(0,1), oob = scales::oob_squish     ) +        theme_bw() +     facet_wrap(~seg) +     scale_x_continuous(expand = expansion(add = 1), limits = c(0,77)) +     scale_y_continuous(expand = expansion(add = 1), limits = c(0,127))"},{"path":"https://kharchenkolab.github.io/numbat/articles/spatial-rna.html","id":"tumor-subclones","dir":"Articles","previous_headings":"Results","what":"Tumor subclones","title":"Spatial transcriptomics","text":"Finally, can visualize tumor subclonal structure inferred Numbat spatial coordinates. First, let’s look usual phylo-heatmap provides summary clonal structure. Figure 4. Tumor phylogeny CNV heatmap BRCA0. stacked color bars left reflect clonal assignment probabilities. phylo-heatmap, can see clone 5 particular harbors significantly CNV events rest tumor cells. Let’s visualize spatial distribution subclones (clone_post$clone_opt) overlay tissue image. Figure 5. Clonal assignments BRCA0. maximum posteriori clonal assignments individual spots shown. Interestingly, zoom close enough, can see distribution clone 5 corresponds visible foci clearly distinct surrounding tumor cells. Taken together, observations suggest clone 5 represents evolved tumor subpopulation actively invading diseased tissue.","code":"options(repr.plot.width = 8, repr.plot.height = 4, repr.plot.res = 200)  pal = c(`1` = \"gray\", `2` = \"#9E0142\", `3` = \"#F67D4A\",         `4` = \"#F2EA91\", `5` = \"#77C8A4\", `6` = \"#5E4FA2\")  nb[['BRCA0']]$plot_phylo_heatmap(pal_clone = pal) options(repr.plot.width = 5, repr.plot.height = 4.2, repr.plot.res = 250)  sample = 'BRCA0'  img <- jpeg::readJPEG(glue(\"~/visium/nyu/images/{sample}_cropped.jpg\"))  spots[[sample]] %>%     left_join(         nb[[sample]]$clone_post,          by = c('barcode' = 'cell')     ) %>%     filter(in_tissue == 1) %>%     mutate(clone_opt = factor(clone_opt)) %>%     ggplot(         aes(x = array_row, y = array_col)     ) +     background_image(img) +     geom_point(         aes(color = clone_opt), size = 0.3, stroke = 0.3, alpha = 0.8, pch = 21     ) +     scale_color_manual(values = pal, limits = force) +     guides(         color = guide_legend(title = \"Clone\", override.aes = aes(size = 3, pch = 16))     ) +     theme_bw() +     scale_x_continuous(expand = expansion(add = 1), limits = c(0,77)) +     scale_y_continuous(expand = expansion(add = 1), limits = c(0,127)) +     ggtitle(sample)"},{"path":"https://kharchenkolab.github.io/numbat/articles/spatial-rna.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Spatial transcriptomics","text":"Like scRNA-seq, allele-specific CNV analysis can applied spatial transcriptomics interrogate genetic heterogeneity tumor. shown Numbat can used differentiate (aneuploid) tumor stromal compartments, evaluate presence/absence specific CNV events spatial locations, elucidate spatial distributions tumor subclones. Visium data even sparser scRNA-seq, added information provided phased allele counts especially valuable CNV calling. key assumption keep mind cells contained spot assumed largely genetically homogenous. However, assumption limiting practice cell mixtures reflected uncertainty posterior probability CNV presence well clonal assignments. Newer generations ST technologies provide single-cell resolution can help overcome limitation future.","code":""},{"path":"https://kharchenkolab.github.io/numbat/articles/spatial-rna.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Spatial transcriptomics","text":"[1] Barkley, D., Moncada, R., Pour, M. et al. Cancer cell states recur across tumor types form specific interactions tumor microenvironment. Nat Genet 54, 1192–1201 (2022). https://doi.org/10.1038/s41588-022-01141-9 [2] Wei, R., , S., Bai, S. et al. Spatial charting single-cell transcriptomes tissues. Nat Biotechnol 40, 1190–1199 (2022). https://www.nature.com/articles/s41587-022-01233-1 [3] Elyanow R, Zeira R, Land M, Raphael BJ. STARCH: copy number clone inference spatial transcriptomics data. Phys Biol. 2021 Mar 9;18(3):035001. doi: 10.1088/1478-3975/abbe99. PMID: 33022659.","code":""},{"path":"https://kharchenkolab.github.io/numbat/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Teng Gao. Maintainer, author. Ruslan Soldatov. Author. Hirak Sarkar. Author. Evan Biederstedt. Author. Peter Kharchenko. Author.","code":""},{"path":"https://kharchenkolab.github.io/numbat/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Gao, T., Soldatov, R., Sarkar, H. et al. Haplotype-aware analysis somatic copy number variations single-cell transcriptomes. Nat Biotechnol (2022). https://doi.org/10.1038/s41587-022-01468-y","code":"@Article{,   title = {Haplotype-aware analysis of somatic copy number variations from single-cell transcriptomes},   author = {{Teng Gao} and Ruslan Soldatov and Hirak Sarkar and Adam Kurkiewicz and Evan Biederstedt and Po-Ru Loh and Peter Kharchenko},   journal = {Nature Biotechnology},   year = {2022},   url = {https://www.nature.com/articles/s41587-022-01468-y}, }"},{"path":"https://kharchenkolab.github.io/numbat/index.html","id":"numbat","dir":"","previous_headings":"","what":"Numbat Guide","title":"Numbat Guide","text":"Numbat haplotype-aware CNV caller single-cell spatial transcriptomics data. integrates signals gene expression, allelic ratio, population-derived haplotype information accurately infer allele-specific CNVs single cells reconstruct lineage relationship. Numbat can used : 1. Detect allele-specific copy number variations scRNA-seq spatial transcriptomics 2. Differentiate tumor versus normal cells tumor microenvironment 3. Infer clonal architecture evolutionary history profiled tumors. Numbat require paired DNA genotype data operates solely donor scRNA-seq data (example, 10x Cell Ranger output). details method, please checkout paper: Teng Gao, Ruslan Soldatov, Hirak Sarkar, Adam Kurkiewicz, Evan Biederstedt, Po-Ru Loh, Peter Kharchenko. Haplotype-aware analysis somatic copy number variations single-cell transcriptomes. Nature Biotechnology (2022).","code":""},{"path":"https://kharchenkolab.github.io/numbat/index.html","id":"user-guide","dir":"","previous_headings":"","what":"User Guide","title":"Numbat Guide","text":"complete guide, please see Numbat User Guide.","code":""},{"path":"https://kharchenkolab.github.io/numbat/index.html","id":"questions","dir":"","previous_headings":"","what":"Questions?","title":"Numbat Guide","text":"appreciate feedback! Please raise github issue bugs, questions new feature requests. bug reports, please attach full log, error message, input parameters, ideally reproducible example (possible).","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/Modes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the modes of a vector — Modes","title":"Get the modes of a vector — Modes","text":"Get modes vector","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/Modes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the modes of a vector — Modes","text":"","code":"Modes(x)"},{"path":"https://kharchenkolab.github.io/numbat/reference/Numbat.html","id":null,"dir":"Reference","previous_headings":"","what":"Numbat R6 class — Numbat","title":"Numbat R6 class — Numbat","text":"Used allow users plot results","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/Numbat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Numbat R6 class — Numbat","text":"new 'Numbat' object","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/Numbat.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Numbat R6 class — Numbat","text":"label character Sample name gtf dataframe Transcript annotation joint_post dataframe Joint posterior exp_post dataframe Expression posterior allele_post dataframe Allele posetrior bulk_subtrees dataframe Bulk profiles lineage subtrees bulk_clones dataframe Bulk profiles clones segs_consensus dataframe Consensus segments tree_post list Tree posterior mut_graph igraph Mutation history graph gtree tbl_graph Single-cell phylogeny clone_post dataframe Clone posteriors gexp_roll_wide matrix Smoothed expression single cells P matrix Genotype probability matrix treeML matrix Maximum likelihood tree phylo object hc hclust Initial hierarchical clustering","code":""},{"path":[]},{"path":"https://kharchenkolab.github.io/numbat/reference/Numbat.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Numbat R6 class — Numbat","text":"Numbat$new() Numbat$plot_phylo_heatmap() Numbat$plot_exp_roll() Numbat$plot_mut_history() Numbat$plot_sc_tree() Numbat$plot_consensus() Numbat$plot_clone_profile() Numbat$cutree() Numbat$clone()","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/Numbat.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Numbat R6 class — Numbat","text":"initialize Numbat class","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/Numbat.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Numbat R6 class — Numbat","text":"","code":"Numbat$new(out_dir, i = 2, gtf = gtf_hg38, verbose = TRUE)"},{"path":"https://kharchenkolab.github.io/numbat/reference/Numbat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Numbat R6 class — Numbat","text":"out_dir character string Output directory integer Get results iteration (default=2) gtf dataframe Transcript gtf (default=gtf_hg38) verbose logical Whether output verbose results (default=TRUE)","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/Numbat.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Numbat R6 class — Numbat","text":"new 'Numbat' object","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/Numbat.html","id":"method-plot-phylo-heatmap-","dir":"Reference","previous_headings":"","what":"Method plot_phylo_heatmap()","title":"Numbat R6 class — Numbat","text":"Plot single-cell CNV calls heatmap corresponding phylogeny","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/Numbat.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Numbat R6 class — Numbat","text":"","code":"Numbat$plot_phylo_heatmap(...)"},{"path":"https://kharchenkolab.github.io/numbat/reference/Numbat.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Numbat R6 class — Numbat","text":"... additional parameters passed plot_phylo_heatmap()","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/Numbat.html","id":"method-plot-exp-roll-","dir":"Reference","previous_headings":"","what":"Method plot_exp_roll()","title":"Numbat R6 class — Numbat","text":"Plot window-smoothed expression profiles","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/Numbat.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Numbat R6 class — Numbat","text":"","code":"Numbat$plot_exp_roll(k = 3, n_sample = 300, ...)"},{"path":"https://kharchenkolab.github.io/numbat/reference/Numbat.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Numbat R6 class — Numbat","text":"k integer Number clusters n_sample integer Number cells subsample ... additional parameters passed plot_exp_roll()","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/Numbat.html","id":"method-plot-mut-history-","dir":"Reference","previous_headings":"","what":"Method plot_mut_history()","title":"Numbat R6 class — Numbat","text":"Plot mutation history tumor","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/Numbat.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Numbat R6 class — Numbat","text":"","code":"Numbat$plot_mut_history(...)"},{"path":"https://kharchenkolab.github.io/numbat/reference/Numbat.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Numbat R6 class — Numbat","text":"... additional parameters passed plot_mut_history()","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/Numbat.html","id":"method-plot-sc-tree-","dir":"Reference","previous_headings":"","what":"Method plot_sc_tree()","title":"Numbat R6 class — Numbat","text":"Plot single cell phylogeny","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/Numbat.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Numbat R6 class — Numbat","text":"","code":"Numbat$plot_sc_tree(...)"},{"path":"https://kharchenkolab.github.io/numbat/reference/Numbat.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Numbat R6 class — Numbat","text":"... additional parameters passed plot_sc_tree()","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/Numbat.html","id":"method-plot-consensus-","dir":"Reference","previous_headings":"","what":"Method plot_consensus()","title":"Numbat R6 class — Numbat","text":"Plot consensus segments","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/Numbat.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Numbat R6 class — Numbat","text":"","code":"Numbat$plot_consensus(...)"},{"path":"https://kharchenkolab.github.io/numbat/reference/Numbat.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Numbat R6 class — Numbat","text":"... additional parameters passed plot_sc_tree()","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/Numbat.html","id":"method-plot-clone-profile-","dir":"Reference","previous_headings":"","what":"Method plot_clone_profile()","title":"Numbat R6 class — Numbat","text":"Plot clone cnv profiles","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/Numbat.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Numbat R6 class — Numbat","text":"","code":"Numbat$plot_clone_profile(...)"},{"path":"https://kharchenkolab.github.io/numbat/reference/Numbat.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Numbat R6 class — Numbat","text":"... additional parameters passed plot_clone_profile()","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/Numbat.html","id":"method-cutree-","dir":"Reference","previous_headings":"","what":"Method cutree()","title":"Numbat R6 class — Numbat","text":"Re-define subclones phylogeny.","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/Numbat.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Numbat R6 class — Numbat","text":"","code":"Numbat$cutree(max_cost = 0, n_cut = 0)"},{"path":"https://kharchenkolab.github.io/numbat/reference/Numbat.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Numbat R6 class — Numbat","text":"max_cost numeric Likelihood threshold collapse internal branches n_cut integer Number cuts phylogeny define subclones","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/Numbat.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Numbat R6 class — Numbat","text":"objects class cloneable method.","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/Numbat.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Numbat R6 class — Numbat","text":"","code":"Numbat$clone(deep = FALSE)"},{"path":"https://kharchenkolab.github.io/numbat/reference/Numbat.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"Numbat R6 class — Numbat","text":"deep Whether make deep clone.","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/acen_hg19.html","id":null,"dir":"Reference","previous_headings":"","what":"centromere regions (hg19) — acen_hg19","title":"centromere regions (hg19) — acen_hg19","text":"centromere regions (hg19)","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/acen_hg19.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"centromere regions (hg19) — acen_hg19","text":"","code":"acen_hg19"},{"path":"https://kharchenkolab.github.io/numbat/reference/acen_hg19.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"centromere regions (hg19) — acen_hg19","text":"object class tbl_df (inherits tbl, data.frame) 22 rows 3 columns.","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/acen_hg38.html","id":null,"dir":"Reference","previous_headings":"","what":"centromere regions (hg38) — acen_hg38","title":"centromere regions (hg38) — acen_hg38","text":"centromere regions (hg38)","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/acen_hg38.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"centromere regions (hg38) — acen_hg38","text":"","code":"acen_hg38"},{"path":"https://kharchenkolab.github.io/numbat/reference/acen_hg38.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"centromere regions (hg38) — acen_hg38","text":"object class tbl_df (inherits tbl, data.frame) 22 rows 3 columns.","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/aggregate_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to make reference gene expression profiles — aggregate_counts","title":"Utility function to make reference gene expression profiles — aggregate_counts","text":"Utility function make reference gene expression profiles","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/aggregate_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to make reference gene expression profiles — aggregate_counts","text":"","code":"aggregate_counts(count_mat, annot, normalized = TRUE, verbose = TRUE)"},{"path":"https://kharchenkolab.github.io/numbat/reference/aggregate_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to make reference gene expression profiles — aggregate_counts","text":"count_mat matrix/dgCMatrix Gene expression counts annot dataframe Cell annotation columns \"cell\" \"group\" normalized logical Whether return normalized expression values verbose logical Verbosity","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/aggregate_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function to make reference gene expression profiles — aggregate_counts","text":"matrix Reference gene expression levels","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/aggregate_counts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Utility function to make reference gene expression profiles — aggregate_counts","text":"","code":"ref_custom = aggregate_counts(count_mat_ref, annot_ref, verbose = FALSE)"},{"path":"https://kharchenkolab.github.io/numbat/reference/analyze_bulk.html","id":null,"dir":"Reference","previous_headings":"","what":"Call CNVs in a pseudobulk profile using the Numbat joint HMM — analyze_bulk","title":"Call CNVs in a pseudobulk profile using the Numbat joint HMM — analyze_bulk","text":"Call CNVs pseudobulk profile using Numbat joint HMM","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/analyze_bulk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Call CNVs in a pseudobulk profile using the Numbat joint HMM — analyze_bulk","text":"","code":"analyze_bulk(   bulk,   t = 1e-05,   gamma = 20,   theta_min = 0.08,   logphi_min = 0.25,   nu = 1,   min_genes = 10,   exp_only = FALSE,   allele_only = FALSE,   bal_cnv = TRUE,   retest = TRUE,   find_diploid = TRUE,   diploid_chroms = NULL,   classify_allele = FALSE,   run_hmm = TRUE,   prior = NULL,   exclude_neu = TRUE,   phasing = TRUE,   verbose = TRUE )"},{"path":"https://kharchenkolab.github.io/numbat/reference/analyze_bulk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Call CNVs in a pseudobulk profile using the Numbat joint HMM — analyze_bulk","text":"bulk dataframe Pesudobulk profile t numeric Transition probability gamma numeric Dispersion parameter Beta-Binomial allele model theta_min numeric Minimum imbalance threshold logphi_min numeric Minimum log expression deviation threshold nu numeric Phase switch rate min_genes integer Minimum number genes call event exp_only logical Whether run expression-HMM allele_only logical Whether run allele-HMM bal_cnv logical Whether call balanced amplifications/deletions retest logical Whether retest CNVs Viterbi decoding find_diploid logical Whether run diploid region identification routine diploid_chroms character vector User-given chromosomes known diploid state classify_allele logical Whether classify allele (internal use ) run_hmm logical Whether run HMM (internal use ) prior numeric vector Prior probabilities states (internal use ) exclude_neu logical Whether exclude neutral segments retesting (internal use ) phasing logical Whether use phasing information (internal use ) verbose logical Verbosity","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/analyze_bulk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Call CNVs in a pseudobulk profile using the Numbat joint HMM — analyze_bulk","text":"pseudobulk profile dataframe called CNV information","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/analyze_bulk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Call CNVs in a pseudobulk profile using the Numbat joint HMM — analyze_bulk","text":"","code":"bulk_analyzed = analyze_bulk(bulk_example, t = 1e-5, find_diploid = FALSE, retest = FALSE)"},{"path":"https://kharchenkolab.github.io/numbat/reference/annot_consensus.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate a set of segments on a pseudobulk dataframe — annot_consensus","title":"Annotate a set of segments on a pseudobulk dataframe — annot_consensus","text":"Annotate set segments pseudobulk dataframe","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/annot_consensus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate a set of segments on a pseudobulk dataframe — annot_consensus","text":"","code":"annot_consensus(bulk, segs_consensus, join_mode = \"inner\")"},{"path":"https://kharchenkolab.github.io/numbat/reference/annot_consensus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate a set of segments on a pseudobulk dataframe — annot_consensus","text":"bulk dataframe Pseudobulk profile segs_consensus datatframe Consensus segment dataframe","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/annot_consensus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotate a set of segments on a pseudobulk dataframe — annot_consensus","text":"dataframe Pseudobulk profile","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/annot_haplo_segs.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate haplotype segments after HMM decoding — annot_haplo_segs","title":"Annotate haplotype segments after HMM decoding — annot_haplo_segs","text":"Annotate haplotype segments HMM decoding","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/annot_haplo_segs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate haplotype segments after HMM decoding — annot_haplo_segs","text":"","code":"annot_haplo_segs(bulk)"},{"path":"https://kharchenkolab.github.io/numbat/reference/annot_ref.html","id":null,"dir":"Reference","previous_headings":"","what":"example reference cell annotation — annot_ref","title":"example reference cell annotation — annot_ref","text":"example reference cell annotation","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/annot_ref.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"example reference cell annotation — annot_ref","text":"","code":"annot_ref"},{"path":"https://kharchenkolab.github.io/numbat/reference/annot_ref.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"example reference cell annotation — annot_ref","text":"object class data.frame 50 rows 2 columns.","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/annot_segs.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate copy number segments after HMM decoding — annot_segs","title":"Annotate copy number segments after HMM decoding — annot_segs","text":"Annotate copy number segments HMM decoding","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/annot_segs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate copy number segments after HMM decoding — annot_segs","text":"","code":"annot_segs(bulk, var = \"cnv_state\")"},{"path":"https://kharchenkolab.github.io/numbat/reference/annot_segs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate copy number segments after HMM decoding — annot_segs","text":"bulk dataframe Pseudobulk profile","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/annot_segs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotate copy number segments after HMM decoding — annot_segs","text":"pseudobulk dataframe","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/annot_theta_mle.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate the theta parameter for each segment — annot_theta_mle","title":"Annotate the theta parameter for each segment — annot_theta_mle","text":"Annotate theta parameter segment","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/annot_theta_mle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate the theta parameter for each segment — annot_theta_mle","text":"","code":"annot_theta_mle(bulk)"},{"path":"https://kharchenkolab.github.io/numbat/reference/annot_theta_mle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate the theta parameter for each segment — annot_theta_mle","text":"bulk dataframe Pseudobulk profile","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/annot_theta_mle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotate the theta parameter for each segment — annot_theta_mle","text":"dataframe Pseudobulk profile","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/annot_theta_roll.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate rolling estimate of imbalance level theta — annot_theta_roll","title":"Annotate rolling estimate of imbalance level theta — annot_theta_roll","text":"Annotate rolling estimate imbalance level theta","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/annot_theta_roll.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate rolling estimate of imbalance level theta — annot_theta_roll","text":"","code":"annot_theta_roll(bulk)"},{"path":"https://kharchenkolab.github.io/numbat/reference/annot_theta_roll.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate rolling estimate of imbalance level theta — annot_theta_roll","text":"bulk pseudobulk dataframe","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/annot_theta_roll.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotate rolling estimate of imbalance level theta — annot_theta_roll","text":"pseudobulk dataframe","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/annotate_genes.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate genes on allele dataframe — annotate_genes","title":"Annotate genes on allele dataframe — annotate_genes","text":"Annotate genes allele dataframe","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/annotate_genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate genes on allele dataframe — annotate_genes","text":"","code":"annotate_genes(df, gtf)"},{"path":"https://kharchenkolab.github.io/numbat/reference/annotate_genes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate genes on allele dataframe — annotate_genes","text":"df dataframe Allele count dataframe gtf dataframe Gene gtf","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/annotate_genes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotate genes on allele dataframe — annotate_genes","text":"dataframe Allele dataframe gene column","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/approx_phi_post.html","id":null,"dir":"Reference","previous_headings":"","what":"Laplace approximation of the posterior of expression fold change phi — approx_phi_post","title":"Laplace approximation of the posterior of expression fold change phi — approx_phi_post","text":"Laplace approximation posterior expression fold change phi","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/approx_phi_post.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Laplace approximation of the posterior of expression fold change phi — approx_phi_post","text":"","code":"approx_phi_post(   Y_obs,   lambda_ref,   d,   alpha = NULL,   beta = NULL,   mu = NULL,   sig = NULL,   lower = 0.2,   upper = 10,   start = 1 )"},{"path":"https://kharchenkolab.github.io/numbat/reference/approx_phi_post.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Laplace approximation of the posterior of expression fold change phi — approx_phi_post","text":"Y_obs numeric vector Gene expression counts lambda_ref numeric vector Reference expression levels d numeric Total library size alpha numeric Shape parameter gamma distribution beta numeric Rate parameter gamma distribution mu numeric Mean normal distribution sig numeric Standard deviation normal distribution lower numeric Lower bound phi upper numeric Upper bound phi start numeric Starting value phi","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/approx_phi_post.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Laplace approximation of the posterior of expression fold change phi — approx_phi_post","text":"numeric MLE phi standard deviation","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/approx_theta_post.html","id":null,"dir":"Reference","previous_headings":"","what":"Laplace approximation of the posterior of allelic imbalance theta — approx_theta_post","title":"Laplace approximation of the posterior of allelic imbalance theta — approx_theta_post","text":"Laplace approximation posterior allelic imbalance theta","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/approx_theta_post.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Laplace approximation of the posterior of allelic imbalance theta — approx_theta_post","text":"","code":"approx_theta_post(   pAD,   DP,   p_s,   lower = 0.001,   upper = 0.499,   start = 0.25,   gamma = 20 )"},{"path":"https://kharchenkolab.github.io/numbat/reference/approx_theta_post.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Laplace approximation of the posterior of allelic imbalance theta — approx_theta_post","text":"pAD numeric vector Variant allele depth DP numeric vector Total allele depth p_s numeric vector Variant allele frequency lower numeric Lower bound theta upper numeric Upper bound theta start numeric Starting value theta gamma numeric Gamma parameter beta-binomial distribution","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/binary_entropy.html","id":null,"dir":"Reference","previous_headings":"","what":"calculate entropy for a binary variable — binary_entropy","title":"calculate entropy for a binary variable — binary_entropy","text":"calculate entropy binary variable","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/binary_entropy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calculate entropy for a binary variable — binary_entropy","text":"","code":"binary_entropy(p)"},{"path":"https://kharchenkolab.github.io/numbat/reference/bulk_example.html","id":null,"dir":"Reference","previous_headings":"","what":"example pseudobulk dataframe — bulk_example","title":"example pseudobulk dataframe — bulk_example","text":"example pseudobulk dataframe","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/bulk_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"example pseudobulk dataframe — bulk_example","text":"","code":"bulk_example"},{"path":"https://kharchenkolab.github.io/numbat/reference/bulk_example.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"example pseudobulk dataframe — bulk_example","text":"object class tbl_df (inherits tbl, data.frame) 3935 rows 83 columns.","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/calc_allele_LLR.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate LLR for an allele HMM — calc_allele_LLR","title":"Calculate LLR for an allele HMM — calc_allele_LLR","text":"Calculate LLR allele HMM","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/calc_allele_LLR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate LLR for an allele HMM — calc_allele_LLR","text":"","code":"calc_allele_LLR(pAD, DP, p_s, theta_mle, theta_0 = 0, gamma = 20)"},{"path":"https://kharchenkolab.github.io/numbat/reference/calc_allele_LLR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate LLR for an allele HMM — calc_allele_LLR","text":"pAD numeric vector Phased allele depth DP numeric vector Total allele depth p_s numeric vector Phase switch probabilities theta_mle numeric MLE imbalance level theta (alternative hypothesis) theta_0 numeric Imbalance level null hypothesis gamma numeric Dispersion parameter Beta-Binomial allele model","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/calc_allele_LLR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate LLR for an allele HMM — calc_allele_LLR","text":"numeric Log-likelihood ratio","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/calc_allele_lik.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate allele likelihoods — calc_allele_lik","title":"Calculate allele likelihoods — calc_allele_lik","text":"Calculate allele likelihoods","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/calc_allele_lik.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate allele likelihoods — calc_allele_lik","text":"","code":"calc_allele_lik(pAD, DP, p_s, theta, gamma = 20)"},{"path":"https://kharchenkolab.github.io/numbat/reference/calc_allele_lik.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate allele likelihoods — calc_allele_lik","text":"pAD integer vector Paternal allele counts DP integer vector Total alelle counts p_s numeric vector Phase switch probabilities theta numeric Haplotype imbalance gamma numeric Overdispersion allele-specific expression","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/calc_cluster_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate expression distance matrix between cell populatoins — calc_cluster_dist","title":"Calculate expression distance matrix between cell populatoins — calc_cluster_dist","text":"Calculate expression distance matrix cell populatoins","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/calc_cluster_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate expression distance matrix between cell populatoins — calc_cluster_dist","text":"","code":"calc_cluster_dist(count_mat, cell_annot)"},{"path":"https://kharchenkolab.github.io/numbat/reference/calc_cluster_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate expression distance matrix between cell populatoins — calc_cluster_dist","text":"count_mat dgCMatrix Gene expression counts cell_annot dataframe specifying cell ID cluster memberships","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/calc_cluster_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate expression distance matrix between cell populatoins — calc_cluster_dist","text":"distance matrix","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/calc_exp_LLR.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate LLR for an expression HMM — calc_exp_LLR","title":"Calculate LLR for an expression HMM — calc_exp_LLR","text":"Calculate LLR expression HMM","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/calc_exp_LLR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate LLR for an expression HMM — calc_exp_LLR","text":"","code":"calc_exp_LLR(   Y_obs,   lambda_ref,   d,   phi_mle,   mu = NULL,   sig = NULL,   alpha = NULL,   beta = NULL )"},{"path":"https://kharchenkolab.github.io/numbat/reference/calc_exp_LLR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate LLR for an expression HMM — calc_exp_LLR","text":"Y_obs numeric vector Gene expression counts lambda_ref numeric vector Reference expression levels d numeric vector Total library size phi_mle numeric MLE expression fold change phi (alternative hypothesis) mu numeric Mean parameter PLN expression model sig numeric Dispersion parameter PLN expression model alpha numeric Hyperparameter gamma poisson model (used) beta numeric Hyperparameter gamma poisson model (used)","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/calc_exp_LLR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate LLR for an expression HMM — calc_exp_LLR","text":"numeric Log-likelihood ratio","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/calc_phi_mle_lnpois.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the MLE of expression fold change phi — calc_phi_mle_lnpois","title":"Calculate the MLE of expression fold change phi — calc_phi_mle_lnpois","text":"Calculate MLE expression fold change phi","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/calc_phi_mle_lnpois.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the MLE of expression fold change phi — calc_phi_mle_lnpois","text":"","code":"calc_phi_mle_lnpois(Y_obs, lambda_ref, d, mu, sig, lower = 0.1, upper = 10)"},{"path":"https://kharchenkolab.github.io/numbat/reference/check_allele_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the format of a allele dataframe — check_allele_df","title":"Check the format of a allele dataframe — check_allele_df","text":"Check format allele dataframe","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/check_allele_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the format of a allele dataframe — check_allele_df","text":"","code":"check_allele_df(df)"},{"path":"https://kharchenkolab.github.io/numbat/reference/check_allele_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the format of a allele dataframe — check_allele_df","text":"df dataframe Allele dataframe","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/check_allele_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the format of a allele dataframe — check_allele_df","text":"dataframe Allele dataframe","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/check_contam.html","id":null,"dir":"Reference","previous_headings":"","what":"check inter-individual contamination — check_contam","title":"check inter-individual contamination — check_contam","text":"check inter-individual contamination","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/check_contam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"check inter-individual contamination — check_contam","text":"","code":"check_contam(bulk)"},{"path":"https://kharchenkolab.github.io/numbat/reference/check_contam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"check inter-individual contamination — check_contam","text":"bulk dataframe Pseudobulk profile","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/check_exp_noise.html","id":null,"dir":"Reference","previous_headings":"","what":"check noise level — check_exp_noise","title":"check noise level — check_exp_noise","text":"check noise level","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/check_exp_noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"check noise level — check_exp_noise","text":"","code":"check_exp_noise(bulk)"},{"path":"https://kharchenkolab.github.io/numbat/reference/check_exp_noise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"check noise level — check_exp_noise","text":"bulk dataframe Pseudobulk profile","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/check_exp_ref.html","id":null,"dir":"Reference","previous_headings":"","what":"check the format of lambdas_ref — check_exp_ref","title":"check the format of lambdas_ref — check_exp_ref","text":"check format lambdas_ref","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/check_exp_ref.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"check the format of lambdas_ref — check_exp_ref","text":"","code":"check_exp_ref(lambdas_ref)"},{"path":"https://kharchenkolab.github.io/numbat/reference/check_exp_ref.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"check the format of lambdas_ref — check_exp_ref","text":"lambdas_ref matrix Expression reference profile","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/check_exp_ref.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"check the format of lambdas_ref — check_exp_ref","text":"matrix Expression reference profile","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/check_gtf_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Check and format the GTF input — check_gtf_input","title":"Check and format the GTF input — check_gtf_input","text":"function validates input GTF object, ensuring either properly structured `GRanges` `data.frame` matches expected Numbat GTF format. `GRanges` provided, processed standard GTF-like `data.frame` gene coordinates annotations.","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/check_gtf_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check and format the GTF input — check_gtf_input","text":"","code":"check_gtf_input(gtf_obj, reference_gtf_cols = colnames(gtf_hg38))"},{"path":"https://kharchenkolab.github.io/numbat/reference/check_gtf_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check and format the GTF input — check_gtf_input","text":"gtf_obj GRanges data.frame; input GTF object reference_gtf_cols character vector; expected column names (default numbat::gtf_hg38)","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/check_gtf_input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check and format the GTF input — check_gtf_input","text":"data.frame Formatted GTF object required structure","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/check_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the format of a count matrix — check_matrix","title":"Check the format of a count matrix — check_matrix","text":"Check format count matrix","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/check_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the format of a count matrix — check_matrix","text":"","code":"check_matrix(count_mat)"},{"path":"https://kharchenkolab.github.io/numbat/reference/check_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the format of a count matrix — check_matrix","text":"count_mat matrix Count matrix","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/check_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the format of a count matrix — check_matrix","text":"matrix Count matrix","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/check_segs_fix.html","id":null,"dir":"Reference","previous_headings":"","what":"check the format of a given consensus segment dataframe — check_segs_fix","title":"check the format of a given consensus segment dataframe — check_segs_fix","text":"check format given consensus segment dataframe","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/check_segs_fix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"check the format of a given consensus segment dataframe — check_segs_fix","text":"","code":"check_segs_fix(segs_consensus_fix)"},{"path":"https://kharchenkolab.github.io/numbat/reference/check_segs_fix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"check the format of a given consensus segment dataframe — check_segs_fix","text":"segs_consensus_fix dataframe Consensus segment dataframe","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/check_segs_fix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"check the format of a given consensus segment dataframe — check_segs_fix","text":"dataframe Consensus segment dataframe","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/check_segs_loh.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the format of a given clonal LOH segment dataframe — check_segs_loh","title":"Check the format of a given clonal LOH segment dataframe — check_segs_loh","text":"Check format given clonal LOH segment dataframe","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/check_segs_loh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the format of a given clonal LOH segment dataframe — check_segs_loh","text":"","code":"check_segs_loh(segs_loh)"},{"path":"https://kharchenkolab.github.io/numbat/reference/check_segs_loh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the format of a given clonal LOH segment dataframe — check_segs_loh","text":"segs_loh dataframe Clonal LOH segment dataframe","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/check_segs_loh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the format of a given clonal LOH segment dataframe — check_segs_loh","text":"dataframe Clonal LOH segment dataframe","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/choose_ref_cor.html","id":null,"dir":"Reference","previous_headings":"","what":"choose beest reference for each cell based on correlation — choose_ref_cor","title":"choose beest reference for each cell based on correlation — choose_ref_cor","text":"choose beest reference cell based correlation","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/choose_ref_cor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"choose beest reference for each cell based on correlation — choose_ref_cor","text":"","code":"choose_ref_cor(count_mat, lambdas_ref, gtf)"},{"path":"https://kharchenkolab.github.io/numbat/reference/choose_ref_cor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"choose beest reference for each cell based on correlation — choose_ref_cor","text":"count_mat dgCMatrix Gene expression counts lambdas_ref matrix Reference expression profiles gtf dataframe Transcript gtf","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/choose_ref_cor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"choose beest reference for each cell based on correlation — choose_ref_cor","text":"named vector Best references cell","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/chrom_sizes_hg19.html","id":null,"dir":"Reference","previous_headings":"","what":"chromosome sizes (hg19) — chrom_sizes_hg19","title":"chromosome sizes (hg19) — chrom_sizes_hg19","text":"chromosome sizes (hg19)","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/chrom_sizes_hg19.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"chromosome sizes (hg19) — chrom_sizes_hg19","text":"","code":"chrom_sizes_hg19"},{"path":"https://kharchenkolab.github.io/numbat/reference/chrom_sizes_hg19.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"chromosome sizes (hg19) — chrom_sizes_hg19","text":"object class data.table (inherits data.frame) 22 rows 2 columns.","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/chrom_sizes_hg38.html","id":null,"dir":"Reference","previous_headings":"","what":"chromosome sizes (hg38) — chrom_sizes_hg38","title":"chromosome sizes (hg38) — chrom_sizes_hg38","text":"chromosome sizes (hg38)","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/chrom_sizes_hg38.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"chromosome sizes (hg38) — chrom_sizes_hg38","text":"","code":"chrom_sizes_hg38"},{"path":"https://kharchenkolab.github.io/numbat/reference/chrom_sizes_hg38.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"chromosome sizes (hg38) — chrom_sizes_hg38","text":"object class data.table (inherits data.frame) 22 rows 2 columns.","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/classify_alleles.html","id":null,"dir":"Reference","previous_headings":"","what":"classify alleles using viterbi and forward-backward — classify_alleles","title":"classify alleles using viterbi and forward-backward — classify_alleles","text":"classify alleles using viterbi forward-backward","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/classify_alleles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"classify alleles using viterbi and forward-backward — classify_alleles","text":"","code":"classify_alleles(bulk)"},{"path":"https://kharchenkolab.github.io/numbat/reference/classify_alleles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"classify alleles using viterbi and forward-backward — classify_alleles","text":"bulk dataframe Pesudobulk profile","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/classify_alleles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"classify alleles using viterbi and forward-backward — classify_alleles","text":"dataframe Pesudobulk profile","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/cnv_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot CNV heatmap — cnv_heatmap","title":"Plot CNV heatmap — cnv_heatmap","text":"Plot CNV heatmap","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/cnv_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot CNV heatmap — cnv_heatmap","text":"","code":"cnv_heatmap(   segs,   var = \"group\",   label_group = TRUE,   legend = TRUE,   exclude_gap = TRUE,   genome = \"hg38\" )"},{"path":"https://kharchenkolab.github.io/numbat/reference/cnv_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot CNV heatmap — cnv_heatmap","text":"segs dataframe Segments plot. Need columns \"seg_start\", \"seg_end\", \"cnv_state\" var character Column facet label_group logical Label groups legend logical Display legend exclude_gap logical Whether mark gap regions genome character Genome build, either 'hg38' 'hg19'","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/cnv_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot CNV heatmap — cnv_heatmap","text":"ggplot Heatmap CNVs along genome","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/cnv_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot CNV heatmap — cnv_heatmap","text":"","code":"p = cnv_heatmap(segs_example)"},{"path":"https://kharchenkolab.github.io/numbat/reference/combine_bulk.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine allele and expression pseudobulks — combine_bulk","title":"Combine allele and expression pseudobulks — combine_bulk","text":"Combine allele expression pseudobulks","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/combine_bulk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine allele and expression pseudobulks — combine_bulk","text":"","code":"combine_bulk(allele_bulk, exp_bulk)"},{"path":"https://kharchenkolab.github.io/numbat/reference/combine_bulk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine allele and expression pseudobulks — combine_bulk","text":"allele_bulk dataframe Bulk allele profile exp_bulk dataframe Bulk expression profile","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/combine_bulk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine allele and expression pseudobulks — combine_bulk","text":"dataframe Pseudobulk allele expression profile","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/compute_posterior.html","id":null,"dir":"Reference","previous_headings":"","what":"Do bayesian averaging to get posteriors — compute_posterior","title":"Do bayesian averaging to get posteriors — compute_posterior","text":"bayesian averaging get posteriors","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/compute_posterior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Do bayesian averaging to get posteriors — compute_posterior","text":"","code":"compute_posterior(PL)"},{"path":"https://kharchenkolab.github.io/numbat/reference/compute_posterior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Do bayesian averaging to get posteriors — compute_posterior","text":"PL dataframe Likelihoods priors","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/compute_posterior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Do bayesian averaging to get posteriors — compute_posterior","text":"dataframe Posteriors","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/contract_nodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge adjacent set of nodes — contract_nodes","title":"Merge adjacent set of nodes — contract_nodes","text":"Merge adjacent set nodes","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/contract_nodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge adjacent set of nodes — contract_nodes","text":"","code":"contract_nodes(G, vset, node_tar = NULL, debug = FALSE)"},{"path":"https://kharchenkolab.github.io/numbat/reference/contract_nodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge adjacent set of nodes — contract_nodes","text":"G igraph Mutation graph vset vector Set adjacent vertices merge","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/contract_nodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge adjacent set of nodes — contract_nodes","text":"igraph Mutation graph","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/count_mat_example.html","id":null,"dir":"Reference","previous_headings":"","what":"example gene expression count matrix — count_mat_example","title":"example gene expression count matrix — count_mat_example","text":"example gene expression count matrix","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/count_mat_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"example gene expression count matrix — count_mat_example","text":"","code":"count_mat_example"},{"path":"https://kharchenkolab.github.io/numbat/reference/count_mat_example.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"example gene expression count matrix — count_mat_example","text":"object class dgCMatrix 1024 rows 173 columns.","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/count_mat_ref.html","id":null,"dir":"Reference","previous_headings":"","what":"example reference count matrix — count_mat_ref","title":"example reference count matrix — count_mat_ref","text":"example reference count matrix","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/count_mat_ref.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"example reference count matrix — count_mat_ref","text":"","code":"count_mat_ref"},{"path":"https://kharchenkolab.github.io/numbat/reference/count_mat_ref.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"example reference count matrix — count_mat_ref","text":"object class dgCMatrix 1000 rows 50 columns.","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/detect_clonal_loh.html","id":null,"dir":"Reference","previous_headings":"","what":"Call clonal LOH using SNP density. Rcommended for cell lines or tumor samples with no normal cells. — detect_clonal_loh","title":"Call clonal LOH using SNP density. Rcommended for cell lines or tumor samples with no normal cells. — detect_clonal_loh","text":"Call clonal LOH using SNP density. Rcommended cell lines tumor samples normal cells.","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/detect_clonal_loh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Call clonal LOH using SNP density. Rcommended for cell lines or tumor samples with no normal cells. — detect_clonal_loh","text":"","code":"detect_clonal_loh(bulk, t = 1e-05, snp_rate_loh = 5, min_depth = 0)"},{"path":"https://kharchenkolab.github.io/numbat/reference/detect_clonal_loh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Call clonal LOH using SNP density. Rcommended for cell lines or tumor samples with no normal cells. — detect_clonal_loh","text":"bulk dataframe Pseudobulk profile t numeric Transition probability snp_rate_loh numeric assumed SNP density clonal LOH regions min_depth integer Minimum coverage filter SNPs","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/detect_clonal_loh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Call clonal LOH using SNP density. Rcommended for cell lines or tumor samples with no normal cells. — detect_clonal_loh","text":"dataframe LOH segments","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/detect_clonal_loh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Call clonal LOH using SNP density. Rcommended for cell lines or tumor samples with no normal cells. — detect_clonal_loh","text":"","code":"segs_loh = detect_clonal_loh(bulk_example) #> Warning: Returning more (or less) than 1 row per `summarise()` group was deprecated in #> dplyr 1.1.0. #> ℹ Please use `reframe()` instead. #> ℹ When switching from `summarise()` to `reframe()`, remember that `reframe()` #>   always returns an ungrouped data frame and adjust accordingly. #> ℹ The deprecated feature was likely used in the numbat package. #>   Please report the issue to the authors."},{"path":"https://kharchenkolab.github.io/numbat/reference/df_allele_example.html","id":null,"dir":"Reference","previous_headings":"","what":"example allele count dataframe — df_allele_example","title":"example allele count dataframe — df_allele_example","text":"example allele count dataframe","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/df_allele_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"example allele count dataframe — df_allele_example","text":"","code":"df_allele_example"},{"path":"https://kharchenkolab.github.io/numbat/reference/df_allele_example.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"example allele count dataframe — df_allele_example","text":"object class data.frame 41167 rows 11 columns.","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/exp_hclust.html","id":null,"dir":"Reference","previous_headings":"","what":"Run smoothed expression-based hclust — exp_hclust","title":"Run smoothed expression-based hclust — exp_hclust","text":"Run smoothed expression-based hclust","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/exp_hclust.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run smoothed expression-based hclust — exp_hclust","text":"","code":"exp_hclust(   count_mat,   lambdas_ref,   gtf,   sc_refs = NULL,   window = 101,   ncores = 1,   verbose = TRUE )"},{"path":"https://kharchenkolab.github.io/numbat/reference/exp_hclust.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run smoothed expression-based hclust — exp_hclust","text":"count_mat dgCMatrix Gene counts lambdas_ref matrix Reference expression profiles gtf dataframe Transcript GTF sc_refs named list Reference choices single cells window integer Sliding window size ncores integer Number cores verbose logical Verbosity","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/expand_states.html","id":null,"dir":"Reference","previous_headings":"","what":"expand multi-allelic CNVs into separate entries in the single-cell posterior dataframe — expand_states","title":"expand multi-allelic CNVs into separate entries in the single-cell posterior dataframe — expand_states","text":"expand multi-allelic CNVs separate entries single-cell posterior dataframe","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/expand_states.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"expand multi-allelic CNVs into separate entries in the single-cell posterior dataframe — expand_states","text":"","code":"expand_states(sc_post, segs_consensus)"},{"path":"https://kharchenkolab.github.io/numbat/reference/expand_states.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"expand multi-allelic CNVs into separate entries in the single-cell posterior dataframe — expand_states","text":"sc_post dataframe Single-cell posteriors segs_consensus dataframe Consensus segments","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/expand_states.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"expand multi-allelic CNVs into separate entries in the single-cell posterior dataframe — expand_states","text":"dataframe Single-cell posteriors multi-allelic CNVs split different entries","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/fill_neu_segs.html","id":null,"dir":"Reference","previous_headings":"","what":"Fill neutral regions into consensus segments — fill_neu_segs","title":"Fill neutral regions into consensus segments — fill_neu_segs","text":"Fill neutral regions consensus segments","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/fill_neu_segs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fill neutral regions into consensus segments — fill_neu_segs","text":"","code":"fill_neu_segs(segs_consensus, segs_neu)"},{"path":"https://kharchenkolab.github.io/numbat/reference/fill_neu_segs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fill neutral regions into consensus segments — fill_neu_segs","text":"segs_consensus dataframe CNV segments multiple samples segs_neu dataframe Neutral segments","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/fill_neu_segs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fill neutral regions into consensus segments — fill_neu_segs","text":"dataframe Collections neutral aberrant segments gaps","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/filter_genes.html","id":null,"dir":"Reference","previous_headings":"","what":"filter for mutually expressed genes — filter_genes","title":"filter for mutually expressed genes — filter_genes","text":"filter mutually expressed genes","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/filter_genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"filter for mutually expressed genes — filter_genes","text":"","code":"filter_genes(count_mat, lambdas_ref, gtf, verbose = FALSE)"},{"path":"https://kharchenkolab.github.io/numbat/reference/filter_genes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"filter for mutually expressed genes — filter_genes","text":"count_mat dgCMatrix Gene expression counts lambdas_ref named numeric vector reference expression profile gtf dataframe Transcript gtf","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/filter_genes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"filter for mutually expressed genes — filter_genes","text":"vector Genes kept filtering","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/find_common_diploid.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the common diploid region in a group of pseudobulks — find_common_diploid","title":"Find the common diploid region in a group of pseudobulks — find_common_diploid","text":"Find common diploid region group pseudobulks","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/find_common_diploid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the common diploid region in a group of pseudobulks — find_common_diploid","text":"","code":"find_common_diploid(   bulks,   grouping = \"clique\",   gamma = 20,   theta_min = 0.08,   t = 1e-05,   fc_min = 2^0.25,   alpha = 1e-04,   min_genes = 10,   ncores = 1,   debug = FALSE,   verbose = TRUE )"},{"path":"https://kharchenkolab.github.io/numbat/reference/find_common_diploid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the common diploid region in a group of pseudobulks — find_common_diploid","text":"bulks dataframe Pseudobulk profiles (differentiated \"sample\" column) grouping logical Whether use cliques components graph find dipoid cluster gamma numeric Dispersion parameter Beta-Binomial allele model theta_min numeric Minimum imbalance threshold t numeric Transition probability fc_min numeric Minimum fold change call quadruploid cluster alpha numeric FDR cut-q values determine edges ncores integer Number cores use","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/find_common_diploid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the common diploid region in a group of pseudobulks — find_common_diploid","text":"list Ploidy information","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/fit_bbinom.html","id":null,"dir":"Reference","previous_headings":"","what":"fit a Beta-Binomial model by maximum likelihood — fit_bbinom","title":"fit a Beta-Binomial model by maximum likelihood — fit_bbinom","text":"fit Beta-Binomial model maximum likelihood","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/fit_bbinom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fit a Beta-Binomial model by maximum likelihood — fit_bbinom","text":"","code":"fit_bbinom(AD, DP)"},{"path":"https://kharchenkolab.github.io/numbat/reference/fit_bbinom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fit a Beta-Binomial model by maximum likelihood — fit_bbinom","text":"AD numeric vector Variant allele depth DP numeric vector Total allele depth","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/fit_bbinom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"fit a Beta-Binomial model by maximum likelihood — fit_bbinom","text":"MLE alpha beta","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/fit_gamma.html","id":null,"dir":"Reference","previous_headings":"","what":"fit gamma maximum likelihood — fit_gamma","title":"fit gamma maximum likelihood — fit_gamma","text":"fit gamma maximum likelihood","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/fit_gamma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fit gamma maximum likelihood — fit_gamma","text":"","code":"fit_gamma(AD, DP, start = 20)"},{"path":"https://kharchenkolab.github.io/numbat/reference/fit_gamma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fit gamma maximum likelihood — fit_gamma","text":"AD numeric vector Variant allele depth DP numeric vector Total allele depth","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/fit_gamma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"fit gamma maximum likelihood — fit_gamma","text":"fit","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/fit_lnpois.html","id":null,"dir":"Reference","previous_headings":"","what":"fit a PLN model by maximum likelihood — fit_lnpois","title":"fit a PLN model by maximum likelihood — fit_lnpois","text":"fit PLN model maximum likelihood","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/fit_lnpois.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fit a PLN model by maximum likelihood — fit_lnpois","text":"","code":"fit_lnpois(Y_obs, lambda_ref, d)"},{"path":"https://kharchenkolab.github.io/numbat/reference/fit_lnpois.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fit a PLN model by maximum likelihood — fit_lnpois","text":"Y_obs numeric vector Gene expression counts lambda_ref numeric vector Reference expression levels d numeric Total library size","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/fit_lnpois.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"fit a PLN model by maximum likelihood — fit_lnpois","text":"numeric MLE mu sig","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/fit_ref_sse.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a reference profile from multiple references using constrained least square — fit_ref_sse","title":"Fit a reference profile from multiple references using constrained least square — fit_ref_sse","text":"Fit reference profile multiple references using constrained least square","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/fit_ref_sse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a reference profile from multiple references using constrained least square — fit_ref_sse","text":"","code":"fit_ref_sse(Y_obs, lambdas_ref, gtf, min_lambda = 2e-06, verbose = FALSE)"},{"path":"https://kharchenkolab.github.io/numbat/reference/fit_ref_sse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a reference profile from multiple references using constrained least square — fit_ref_sse","text":"Y_obs vector lambdas_ref named vector gtf dataframe","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/fit_ref_sse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a reference profile from multiple references using constrained least square — fit_ref_sse","text":"fitted expression profile","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/fit_snp_rate.html","id":null,"dir":"Reference","previous_headings":"","what":"negative binomial model — fit_snp_rate","title":"negative binomial model — fit_snp_rate","text":"negative binomial model","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/fit_snp_rate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"negative binomial model — fit_snp_rate","text":"","code":"fit_snp_rate(gene_snps, gene_length)"},{"path":"https://kharchenkolab.github.io/numbat/reference/gaps_hg19.html","id":null,"dir":"Reference","previous_headings":"","what":"genome gap regions (hg19) — gaps_hg19","title":"genome gap regions (hg19) — gaps_hg19","text":"genome gap regions (hg19)","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/gaps_hg19.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"genome gap regions (hg19) — gaps_hg19","text":"","code":"gaps_hg19"},{"path":"https://kharchenkolab.github.io/numbat/reference/gaps_hg19.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"genome gap regions (hg19) — gaps_hg19","text":"object class data.table (inherits data.frame) 28 rows 3 columns.","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/gaps_hg38.html","id":null,"dir":"Reference","previous_headings":"","what":"genome gap regions (hg38) — gaps_hg38","title":"genome gap regions (hg38) — gaps_hg38","text":"genome gap regions (hg38)","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/gaps_hg38.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"genome gap regions (hg38) — gaps_hg38","text":"","code":"gaps_hg38"},{"path":"https://kharchenkolab.github.io/numbat/reference/gaps_hg38.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"genome gap regions (hg38) — gaps_hg38","text":"object class data.table (inherits data.frame) 30 rows 3 columns.","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/generate_postfix.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate alphabetical postfixes — generate_postfix","title":"Generate alphabetical postfixes — generate_postfix","text":"Generate alphabetical postfixes","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/generate_postfix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate alphabetical postfixes — generate_postfix","text":"","code":"generate_postfix(n)"},{"path":"https://kharchenkolab.github.io/numbat/reference/generate_postfix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate alphabetical postfixes — generate_postfix","text":"n vector integers","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/generate_postfix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate alphabetical postfixes — generate_postfix","text":"vector alphabetical postfixes","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/genotype.html","id":null,"dir":"Reference","previous_headings":"","what":"Genotyping main function — genotype","title":"Genotyping main function — genotype","text":"Genotyping main function","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/genotype.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Genotyping main function — genotype","text":"","code":"genotype(label, samples, vcfs, outdir, het_only = FALSE, chr_prefix = TRUE)"},{"path":"https://kharchenkolab.github.io/numbat/reference/genotype.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Genotyping main function — genotype","text":"label character Individual/sample label samples vector Sample names vcfs list vcfR VCFs cellsnp-lite pileup outdir character Output directory het_only logical Whether use heterozygous SNPs chr_prefix logical Whether add chr prefix","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/genotype.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Genotyping main function — genotype","text":"integer Status code","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_allele_bulk.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate into pseudobulk alelle profile — get_allele_bulk","title":"Aggregate into pseudobulk alelle profile — get_allele_bulk","text":"Aggregate pseudobulk alelle profile","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_allele_bulk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate into pseudobulk alelle profile — get_allele_bulk","text":"","code":"get_allele_bulk(df_allele, nu = 1, min_depth = 0)"},{"path":"https://kharchenkolab.github.io/numbat/reference/get_allele_bulk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate into pseudobulk alelle profile — get_allele_bulk","text":"df_allele dataframe Single-cell allele counts nu numeric Phase switch rate min_depth integer Minimum coverage filter SNPs","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_allele_bulk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate into pseudobulk alelle profile — get_allele_bulk","text":"dataframe Pseudobulk allele profile","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_allele_hmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Get an allele HMM — get_allele_hmm","title":"Get an allele HMM — get_allele_hmm","text":"Get allele HMM","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_allele_hmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get an allele HMM — get_allele_hmm","text":"","code":"get_allele_hmm(pAD, DP, p_s, theta, gamma = 20)"},{"path":"https://kharchenkolab.github.io/numbat/reference/get_allele_hmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get an allele HMM — get_allele_hmm","text":"pAD integer vector Paternal allele counts DP integer vector Total alelle counts p_s numeric vector Phase switch probabilities theta numeric Haplotype imbalance gamma numeric Overdispersion allele-specific expression","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_allele_hmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get an allele HMM — get_allele_hmm","text":"HMM object","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_allele_post.html","id":null,"dir":"Reference","previous_headings":"","what":"get CNV allele posteriors — get_allele_post","title":"get CNV allele posteriors — get_allele_post","text":"get CNV allele posteriors","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_allele_post.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get CNV allele posteriors — get_allele_post","text":"","code":"get_allele_post(df_allele, haplotypes, segs_consensus)"},{"path":"https://kharchenkolab.github.io/numbat/reference/get_allele_post.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get CNV allele posteriors — get_allele_post","text":"df_allele dataframe Allele counts haplotypes dataframe Haplotype classification segs_consensus dataframe Consensus CNV segments","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_allele_post.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get CNV allele posteriors — get_allele_post","text":"dataframe Allele posteriors","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_bulk.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate single-cell data into combined bulk expression and allele profile — get_bulk","title":"Aggregate single-cell data into combined bulk expression and allele profile — get_bulk","text":"Aggregate single-cell data combined bulk expression allele profile","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_bulk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate single-cell data into combined bulk expression and allele profile — get_bulk","text":"","code":"get_bulk(   count_mat,   lambdas_ref,   df_allele,   gtf,   subset = NULL,   min_depth = 0,   nu = 1,   segs_loh = NULL,   verbose = TRUE )"},{"path":"https://kharchenkolab.github.io/numbat/reference/get_bulk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate single-cell data into combined bulk expression and allele profile — get_bulk","text":"count_mat dgCMatrix Gene expression counts lambdas_ref matrix Reference expression profiles df_allele dataframe Single-cell allele counts gtf dataframe Transcript gtf subset vector Subset cells aggregate min_depth integer Minimum coverage filter SNPs nu numeric Phase switch rate segs_loh dataframe Segments clonal LOH excluded verbose logical Verbosity","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_bulk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate single-cell data into combined bulk expression and allele profile — get_bulk","text":"dataframe Pseudobulk gene expression allele profile","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_bulk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate single-cell data into combined bulk expression and allele profile — get_bulk","text":"","code":"bulk_example = get_bulk(     count_mat = count_mat_example,     lambdas_ref = ref_hca,     df_allele = df_allele_example,     gtf = gtf_hg38)"},{"path":"https://kharchenkolab.github.io/numbat/reference/get_clone_post.html","id":null,"dir":"Reference","previous_headings":"","what":"Map cells to the phylogeny (or genotypes) based on CNV posteriors — get_clone_post","title":"Map cells to the phylogeny (or genotypes) based on CNV posteriors — get_clone_post","text":"Map cells phylogeny (genotypes) based CNV posteriors","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_clone_post.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map cells to the phylogeny (or genotypes) based on CNV posteriors — get_clone_post","text":"","code":"get_clone_post(gtree, exp_post, allele_post)"},{"path":"https://kharchenkolab.github.io/numbat/reference/get_clone_post.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map cells to the phylogeny (or genotypes) based on CNV posteriors — get_clone_post","text":"gtree tbl_graph cell lineage tree exp_post dataframe Expression posteriors allele_post dataframe Allele posteriors","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_clone_post.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map cells to the phylogeny (or genotypes) based on CNV posteriors — get_clone_post","text":"dataframe Clone posteriors","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_exp_bulk.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate into bulk expression profile — get_exp_bulk","title":"Aggregate into bulk expression profile — get_exp_bulk","text":"Aggregate bulk expression profile","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_exp_bulk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate into bulk expression profile — get_exp_bulk","text":"","code":"get_exp_bulk(count_mat, lambdas_ref, gtf, verbose = FALSE)"},{"path":"https://kharchenkolab.github.io/numbat/reference/get_exp_bulk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate into bulk expression profile — get_exp_bulk","text":"count_mat dgCMatrix Gene expression counts lambdas_ref matrix Reference expression profiles gtf dataframe Transcript gtf","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_exp_bulk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate into bulk expression profile — get_exp_bulk","text":"dataframe Pseudobulk gene expression profile","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_exp_likelihoods.html","id":null,"dir":"Reference","previous_headings":"","what":"get the single cell expression likelihoods — get_exp_likelihoods","title":"get the single cell expression likelihoods — get_exp_likelihoods","text":"get single cell expression likelihoods","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_exp_likelihoods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get the single cell expression likelihoods — get_exp_likelihoods","text":"","code":"get_exp_likelihoods(   exp_counts,   diploid_chroms = NULL,   use_loh = FALSE,   depth_obs = NULL,   mu = NULL,   sigma = NULL )"},{"path":"https://kharchenkolab.github.io/numbat/reference/get_exp_likelihoods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get the single cell expression likelihoods — get_exp_likelihoods","text":"exp_counts dataframe Single-cell expression counts (CHROM, seg, cnv_state, gene, Y_obs, lambda_ref) diploid_chroms character vector Known diploid chromosomes use_loh logical Whether include CNLOH regions baseline","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_exp_likelihoods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get the single cell expression likelihoods — get_exp_likelihoods","text":"dataframe Single-cell CNV likelihood scores","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_exp_post.html","id":null,"dir":"Reference","previous_headings":"","what":"compute single-cell expression posteriors — get_exp_post","title":"compute single-cell expression posteriors — get_exp_post","text":"compute single-cell expression posteriors","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_exp_post.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"compute single-cell expression posteriors — get_exp_post","text":"","code":"get_exp_post(   segs_consensus,   count_mat,   gtf,   lambdas_ref,   sc_refs = NULL,   diploid_chroms = NULL,   use_loh = NULL,   segs_loh = NULL,   ncores = 30,   verbose = TRUE,   debug = FALSE )"},{"path":"https://kharchenkolab.github.io/numbat/reference/get_exp_post.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"compute single-cell expression posteriors — get_exp_post","text":"segs_consensus dataframe Consensus segments count_mat dgCMatrix gene expression count matrix gtf dataframe transcript gtf lambdas_ref matrix Reference expression profiles","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_exp_post.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"compute single-cell expression posteriors — get_exp_post","text":"dataframe Expression posteriors","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_exp_sc.html","id":null,"dir":"Reference","previous_headings":"","what":"get the single cell expression dataframe — get_exp_sc","title":"get the single cell expression dataframe — get_exp_sc","text":"get single cell expression dataframe","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_exp_sc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get the single cell expression dataframe — get_exp_sc","text":"","code":"get_exp_sc(segs_consensus, count_mat, gtf, segs_loh = NULL)"},{"path":"https://kharchenkolab.github.io/numbat/reference/get_exp_sc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get the single cell expression dataframe — get_exp_sc","text":"segs_consensus dataframe Consensus segments count_mat dgCMatrix gene expression count matrix gtf dataframe Transcript gtf","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_exp_sc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get the single cell expression dataframe — get_exp_sc","text":"dataframe single cell expression counts annotated segments","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_gtree.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a tidygraph tree with simplified mutational history. — get_gtree","title":"Get a tidygraph tree with simplified mutational history. — get_gtree","text":"Specify either max_cost n_cut. max_cost works similarly h n_cut works similarly k stats::cutree. top-level normal diploid clone always included.","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_gtree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a tidygraph tree with simplified mutational history. — get_gtree","text":"","code":"get_gtree(tree, P, n_cut = 0, max_cost = 0)"},{"path":"https://kharchenkolab.github.io/numbat/reference/get_gtree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a tidygraph tree with simplified mutational history. — get_gtree","text":"tree phylo Single-cell phylogenetic tree P matrix Genotype probability matrix n_cut integer Number cuts phylogeny define subclones max_cost numeric Likelihood threshold collapse internal branches","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_gtree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a tidygraph tree with simplified mutational history. — get_gtree","text":"tbl_graph Phylogeny annotated branch lengths mutation events","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_haplotype_post.html","id":null,"dir":"Reference","previous_headings":"","what":"Get phased haplotypes — get_haplotype_post","title":"Get phased haplotypes — get_haplotype_post","text":"Get phased haplotypes","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_haplotype_post.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get phased haplotypes — get_haplotype_post","text":"","code":"get_haplotype_post(bulks, segs_consensus, naive = FALSE)"},{"path":"https://kharchenkolab.github.io/numbat/reference/get_haplotype_post.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get phased haplotypes — get_haplotype_post","text":"bulks dataframe Subtree pseudobulk profiles segs_consensus dataframe Consensus CNV segments naive logical Whether use naive haplotype classification","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_haplotype_post.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get phased haplotypes — get_haplotype_post","text":"dataframe Posterior haplotypes","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_inter_cm.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to get inter-SNP distance — get_inter_cm","title":"Helper function to get inter-SNP distance — get_inter_cm","text":"Helper function get inter-SNP distance","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_inter_cm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to get inter-SNP distance — get_inter_cm","text":"","code":"get_inter_cm(d)"},{"path":"https://kharchenkolab.github.io/numbat/reference/get_inter_cm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to get inter-SNP distance — get_inter_cm","text":"d numeric vector Genetic positions centimorgan (cM)","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_inter_cm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to get inter-SNP distance — get_inter_cm","text":"numeric vector Inter-SNP genetic distances","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_internal_nodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to get the internal nodes of a dendrogram and the leafs in each subtree — get_internal_nodes","title":"Helper function to get the internal nodes of a dendrogram and the leafs in each subtree — get_internal_nodes","text":"Helper function get internal nodes dendrogram leafs subtree","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_internal_nodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to get the internal nodes of a dendrogram and the leafs in each subtree — get_internal_nodes","text":"","code":"get_internal_nodes(den, node, labels)"},{"path":"https://kharchenkolab.github.io/numbat/reference/get_internal_nodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to get the internal nodes of a dendrogram and the leafs in each subtree — get_internal_nodes","text":"den dendrogram node character Node name labels character vector Leaf labels","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_joint_post.html","id":null,"dir":"Reference","previous_headings":"","what":"get joint posteriors — get_joint_post","title":"get joint posteriors — get_joint_post","text":"get joint posteriors","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_joint_post.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get joint posteriors — get_joint_post","text":"","code":"get_joint_post(exp_post, allele_post, segs_consensus)"},{"path":"https://kharchenkolab.github.io/numbat/reference/get_joint_post.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get joint posteriors — get_joint_post","text":"exp_post dataframe Expression single-cell CNV posteriors allele_post dataframe Allele single-cell CNV posteriors segs_consensus dataframe Consensus CNV segments","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_joint_post.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get joint posteriors — get_joint_post","text":"dataframe Joint single-cell CNV posteriors","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_lambdas_bar.html","id":null,"dir":"Reference","previous_headings":"","what":"Get average reference expressio profile based on single-cell ref choices — get_lambdas_bar","title":"Get average reference expressio profile based on single-cell ref choices — get_lambdas_bar","text":"Get average reference expressio profile based single-cell ref choices","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_lambdas_bar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get average reference expressio profile based on single-cell ref choices — get_lambdas_bar","text":"","code":"get_lambdas_bar(lambdas_ref, sc_refs, verbose = TRUE)"},{"path":"https://kharchenkolab.github.io/numbat/reference/get_lambdas_bar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get average reference expressio profile based on single-cell ref choices — get_lambdas_bar","text":"lambdas_ref matrix Reference expression profiles sc_refs vector Single-cell reference choices verbose logical Print messages","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_move_cost.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the cost of a mutation reassignment — get_move_cost","title":"Get the cost of a mutation reassignment — get_move_cost","text":"Get cost mutation reassignment","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_move_cost.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the cost of a mutation reassignment — get_move_cost","text":"","code":"get_move_cost(muts, node_ori, node_tar, l_matrix)"},{"path":"https://kharchenkolab.github.io/numbat/reference/get_move_cost.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the cost of a mutation reassignment — get_move_cost","text":"muts character Mutations dlimited comma node_ori character Name \"\" node node_tar character Name \"\" node","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_move_cost.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the cost of a mutation reassignment — get_move_cost","text":"numeric Likelihood cost mutation reassignment","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_move_opt.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the least costly mutation reassignment — get_move_opt","title":"Get the least costly mutation reassignment — get_move_opt","text":"Get least costly mutation reassignment","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_move_opt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the least costly mutation reassignment — get_move_opt","text":"","code":"get_move_opt(G, l_matrix)"},{"path":"https://kharchenkolab.github.io/numbat/reference/get_move_opt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the least costly mutation reassignment — get_move_opt","text":"G igraph Mutation graph l_matrix matrix Likelihood matrix mutation placements","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_move_opt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the least costly mutation reassignment — get_move_opt","text":"numeric Lieklihood cost performing mutation move","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_nodes_celltree.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the internal nodes of a dendrogram and the leafs in each subtree — get_nodes_celltree","title":"Get the internal nodes of a dendrogram and the leafs in each subtree — get_nodes_celltree","text":"Get internal nodes dendrogram leafs subtree","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_nodes_celltree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the internal nodes of a dendrogram and the leafs in each subtree — get_nodes_celltree","text":"","code":"get_nodes_celltree(hc, clusters)"},{"path":"https://kharchenkolab.github.io/numbat/reference/get_nodes_celltree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the internal nodes of a dendrogram and the leafs in each subtree — get_nodes_celltree","text":"hc hclust Clustering results clusters named vector Cutree output specifying terminal clusters","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_nodes_celltree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the internal nodes of a dendrogram and the leafs in each subtree — get_nodes_celltree","text":"list Interal node subtrees leaf memberships","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_ordered_tips.html","id":null,"dir":"Reference","previous_headings":"","what":"Get ordered tips from a tree — get_ordered_tips","title":"Get ordered tips from a tree — get_ordered_tips","text":"Get ordered tips tree","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_ordered_tips.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get ordered tips from a tree — get_ordered_tips","text":"","code":"get_ordered_tips(tree)"},{"path":"https://kharchenkolab.github.io/numbat/reference/get_segs_consensus.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract consensus CNV segments — get_segs_consensus","title":"Extract consensus CNV segments — get_segs_consensus","text":"Extract consensus CNV segments","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_segs_consensus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract consensus CNV segments — get_segs_consensus","text":"","code":"get_segs_consensus(bulks, min_LLR = 5, min_overlap = 0.45, retest = TRUE)"},{"path":"https://kharchenkolab.github.io/numbat/reference/get_segs_consensus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract consensus CNV segments — get_segs_consensus","text":"bulks dataframe Pseudobulks min_LLR numeric LLR threshold filter CNVs min_overlap numeric Minimum overlap fraction determine count two events overlapping","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_segs_consensus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract consensus CNV segments — get_segs_consensus","text":"dataframe Consensus segments","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_segs_neu.html","id":null,"dir":"Reference","previous_headings":"","what":"get neutral segments from multiple pseudobulks — get_segs_neu","title":"get neutral segments from multiple pseudobulks — get_segs_neu","text":"get neutral segments multiple pseudobulks","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_segs_neu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get neutral segments from multiple pseudobulks — get_segs_neu","text":"","code":"get_segs_neu(bulks)"},{"path":"https://kharchenkolab.github.io/numbat/reference/get_snps.html","id":null,"dir":"Reference","previous_headings":"","what":"process VCFs into SNP dataframe — get_snps","title":"process VCFs into SNP dataframe — get_snps","text":"process VCFs SNP dataframe","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_snps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"process VCFs into SNP dataframe — get_snps","text":"","code":"get_snps(vcf)"},{"path":"https://kharchenkolab.github.io/numbat/reference/get_snps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"process VCFs into SNP dataframe — get_snps","text":"vcf vcfR object","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_snps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"process VCFs into SNP dataframe — get_snps","text":"dataframe SNP information","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_tree_post.html","id":null,"dir":"Reference","previous_headings":"","what":"Find maximum lilkelihood assignment of mutations on a tree — get_tree_post","title":"Find maximum lilkelihood assignment of mutations on a tree — get_tree_post","text":"Find maximum lilkelihood assignment mutations tree","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_tree_post.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find maximum lilkelihood assignment of mutations on a tree — get_tree_post","text":"","code":"get_tree_post(tree, P)"},{"path":"https://kharchenkolab.github.io/numbat/reference/get_tree_post.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find maximum lilkelihood assignment of mutations on a tree — get_tree_post","text":"tree phylo Single-cell phylogenetic tree P matrix Genotype probability matrix","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/get_tree_post.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find maximum lilkelihood assignment of mutations on a tree — get_tree_post","text":"list Mutation","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/gexp_roll_example.html","id":null,"dir":"Reference","previous_headings":"","what":"example smoothed gene expression dataframe — gexp_roll_example","title":"example smoothed gene expression dataframe — gexp_roll_example","text":"example smoothed gene expression dataframe","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/gexp_roll_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"example smoothed gene expression dataframe — gexp_roll_example","text":"","code":"gexp_roll_example"},{"path":"https://kharchenkolab.github.io/numbat/reference/gexp_roll_example.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"example smoothed gene expression dataframe — gexp_roll_example","text":"object class data.frame 10 rows 2000 columns.","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/gtf_hg19.html","id":null,"dir":"Reference","previous_headings":"","what":"gene model (hg19) — gtf_hg19","title":"gene model (hg19) — gtf_hg19","text":"gene model (hg19)","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/gtf_hg19.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"gene model (hg19) — gtf_hg19","text":"","code":"gtf_hg19"},{"path":"https://kharchenkolab.github.io/numbat/reference/gtf_hg19.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"gene model (hg19) — gtf_hg19","text":"object class data.table (inherits data.frame) 26841 rows 5 columns.","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/gtf_hg38.html","id":null,"dir":"Reference","previous_headings":"","what":"gene model (hg38) — gtf_hg38","title":"gene model (hg38) — gtf_hg38","text":"gene model (hg38)","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/gtf_hg38.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"gene model (hg38) — gtf_hg38","text":"","code":"gtf_hg38"},{"path":"https://kharchenkolab.github.io/numbat/reference/gtf_hg38.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"gene model (hg38) — gtf_hg38","text":"object class data.table (inherits data.frame) 26807 rows 5 columns.","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/gtf_mm10.html","id":null,"dir":"Reference","previous_headings":"","what":"gene model (mm10) — gtf_mm10","title":"gene model (mm10) — gtf_mm10","text":"gene model (mm10)","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/gtf_mm10.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"gene model (mm10) — gtf_mm10","text":"","code":"gtf_mm10"},{"path":"https://kharchenkolab.github.io/numbat/reference/gtf_mm10.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"gene model (mm10) — gtf_mm10","text":"object class data.table (inherits data.frame) 30336 rows 5 columns.","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/hc_example.html","id":null,"dir":"Reference","previous_headings":"","what":"example hclust tree — hc_example","title":"example hclust tree — hc_example","text":"example hclust tree","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/hc_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"example hclust tree — hc_example","text":"","code":"hc_example"},{"path":"https://kharchenkolab.github.io/numbat/reference/hc_example.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"example hclust tree — hc_example","text":"object class hclust length 7.","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/joint_post_example.html","id":null,"dir":"Reference","previous_headings":"","what":"example joint single-cell cnv posterior dataframe — joint_post_example","title":"example joint single-cell cnv posterior dataframe — joint_post_example","text":"example joint single-cell cnv posterior dataframe","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/joint_post_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"example joint single-cell cnv posterior dataframe — joint_post_example","text":"","code":"joint_post_example"},{"path":"https://kharchenkolab.github.io/numbat/reference/joint_post_example.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"example joint single-cell cnv posterior dataframe — joint_post_example","text":"object class data.table (inherits data.frame) 3806 rows 71 columns.","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/label_edges.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate the direct upstream or downstream mutations on the edges — label_edges","title":"Annotate the direct upstream or downstream mutations on the edges — label_edges","text":"Annotate direct upstream downstream mutations edges","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/label_edges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate the direct upstream or downstream mutations on the edges — label_edges","text":"","code":"label_edges(G)"},{"path":"https://kharchenkolab.github.io/numbat/reference/label_edges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate the direct upstream or downstream mutations on the edges — label_edges","text":"G igraph Mutation graph","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/label_edges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotate the direct upstream or downstream mutations on the edges — label_edges","text":"igraph Mutation graph","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/label_genotype.html","id":null,"dir":"Reference","previous_headings":"","what":"Label the genotypes on a mutation graph — label_genotype","title":"Label the genotypes on a mutation graph — label_genotype","text":"Label genotypes mutation graph","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/label_genotype.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Label the genotypes on a mutation graph — label_genotype","text":"","code":"label_genotype(G)"},{"path":"https://kharchenkolab.github.io/numbat/reference/label_genotype.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Label the genotypes on a mutation graph — label_genotype","text":"G igraph Mutation graph","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/label_genotype.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Label the genotypes on a mutation graph — label_genotype","text":"igraph Mutation graph","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/log_mem.html","id":null,"dir":"Reference","previous_headings":"","what":"Log memory usage — log_mem","title":"Log memory usage — log_mem","text":"Log memory usage","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/log_mem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log memory usage — log_mem","text":"","code":"log_mem()"},{"path":"https://kharchenkolab.github.io/numbat/reference/log_message.html","id":null,"dir":"Reference","previous_headings":"","what":"Log a message — log_message","title":"Log a message — log_message","text":"Log message","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/log_message.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log a message — log_message","text":"","code":"log_message(msg, verbose = TRUE)"},{"path":"https://kharchenkolab.github.io/numbat/reference/log_message.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log a message — log_message","text":"msg string Message log verbose boolean Whether print message console","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/make_group_bulks.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a group of pseudobulks — make_group_bulks","title":"Make a group of pseudobulks — make_group_bulks","text":"Make group pseudobulks","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/make_group_bulks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a group of pseudobulks — make_group_bulks","text":"","code":"make_group_bulks(   groups,   count_mat,   df_allele,   lambdas_ref,   gtf,   min_depth = 0,   nu = 1,   segs_loh = NULL,   ncores = NULL )"},{"path":"https://kharchenkolab.github.io/numbat/reference/make_group_bulks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a group of pseudobulks — make_group_bulks","text":"groups list Contains fields named \"sample\", \"cells\", \"size\", \"members\" count_mat dgCMatrix Gene counts df_allele dataframe Alelle counts lambdas_ref matrix Reference expression profiles gtf dataframe Transcript GTF min_depth integer Minimum allele depth include segs_loh dataframe Segments clonal LOH excluded ncores integer Number cores","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/make_group_bulks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a group of pseudobulks — make_group_bulks","text":"dataframe Pseudobulk profiles","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/mark_tumor_lineage.html","id":null,"dir":"Reference","previous_headings":"","what":"Mark the tumor lineage of a phylogeny — mark_tumor_lineage","title":"Mark the tumor lineage of a phylogeny — mark_tumor_lineage","text":"Mark tumor lineage phylogeny","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/mark_tumor_lineage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mark the tumor lineage of a phylogeny — mark_tumor_lineage","text":"","code":"mark_tumor_lineage(gtree)"},{"path":"https://kharchenkolab.github.io/numbat/reference/mark_tumor_lineage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mark the tumor lineage of a phylogeny — mark_tumor_lineage","text":"gtree tbl_graph Single-cell phylogeny","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/mark_tumor_lineage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mark the tumor lineage of a phylogeny — mark_tumor_lineage","text":"tbl_graph Phylogeny annotated tumor versus normal compartment","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/mut_graph_example.html","id":null,"dir":"Reference","previous_headings":"","what":"example mutation graph — mut_graph_example","title":"example mutation graph — mut_graph_example","text":"example mutation graph","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/mut_graph_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"example mutation graph — mut_graph_example","text":"","code":"mut_graph_example"},{"path":"https://kharchenkolab.github.io/numbat/reference/mut_graph_example.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"example mutation graph — mut_graph_example","text":"object class igraph length 5.","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/phi_hat_roll.html","id":null,"dir":"Reference","previous_headings":"","what":"Rolling estimate of expression fold change phi — phi_hat_roll","title":"Rolling estimate of expression fold change phi — phi_hat_roll","text":"Rolling estimate expression fold change phi","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/phi_hat_roll.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rolling estimate of expression fold change phi — phi_hat_roll","text":"","code":"phi_hat_roll(Y_obs, lambda_ref, d_obs, mu, sig, h)"},{"path":"https://kharchenkolab.github.io/numbat/reference/phi_hat_seg.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate of expression fold change phi in a segment — phi_hat_seg","title":"Estimate of expression fold change phi in a segment — phi_hat_seg","text":"Estimate expression fold change phi segment","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/phi_hat_seg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate of expression fold change phi in a segment — phi_hat_seg","text":"","code":"phi_hat_seg(Y_obs, lambda_ref, d, mu, sig)"},{"path":"https://kharchenkolab.github.io/numbat/reference/phylogeny_example.html","id":null,"dir":"Reference","previous_headings":"","what":"example single-cell phylogeny — phylogeny_example","title":"example single-cell phylogeny — phylogeny_example","text":"example single-cell phylogeny","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/phylogeny_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"example single-cell phylogeny — phylogeny_example","text":"","code":"phylogeny_example"},{"path":"https://kharchenkolab.github.io/numbat/reference/phylogeny_example.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"example single-cell phylogeny — phylogeny_example","text":"object class tbl_graph (inherits igraph) length 345.","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/plot_bulks.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a group of pseudobulk HMM profiles — plot_bulks","title":"Plot a group of pseudobulk HMM profiles — plot_bulks","text":"Plot group pseudobulk HMM profiles","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/plot_bulks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a group of pseudobulk HMM profiles — plot_bulks","text":"","code":"plot_bulks(bulks, ..., ncol = 1, title = TRUE, title_size = 8)"},{"path":"https://kharchenkolab.github.io/numbat/reference/plot_bulks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a group of pseudobulk HMM profiles — plot_bulks","text":"bulks dataframe Pseudobulk profiles annotated \"sample\" column ... additional parameters passed plot_psbulk() ncol integer Number columns title logical Whether add titles individual plots title_size numeric Size titles","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/plot_bulks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a group of pseudobulk HMM profiles — plot_bulks","text":"ggplot object","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/plot_bulks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a group of pseudobulk HMM profiles — plot_bulks","text":"","code":"p = plot_bulks(bulk_example)"},{"path":"https://kharchenkolab.github.io/numbat/reference/plot_consensus.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot consensus CNVs — plot_consensus","title":"Plot consensus CNVs — plot_consensus","text":"Plot consensus CNVs","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/plot_consensus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot consensus CNVs — plot_consensus","text":"","code":"plot_consensus(segs)"},{"path":"https://kharchenkolab.github.io/numbat/reference/plot_consensus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot consensus CNVs — plot_consensus","text":"segs dataframe Consensus segments","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/plot_consensus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot consensus CNVs — plot_consensus","text":"ggplot object","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/plot_consensus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot consensus CNVs — plot_consensus","text":"","code":"p = plot_consensus(segs_example)"},{"path":"https://kharchenkolab.github.io/numbat/reference/plot_exp_roll.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot single-cell smoothed expression magnitude heatmap — plot_exp_roll","title":"Plot single-cell smoothed expression magnitude heatmap — plot_exp_roll","text":"Plot single-cell smoothed expression magnitude heatmap","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/plot_exp_roll.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot single-cell smoothed expression magnitude heatmap — plot_exp_roll","text":"","code":"plot_exp_roll(   gexp_roll_wide,   hc,   k,   gtf,   lim = 0.8,   n_sample = 300,   reverse = TRUE,   plot_tree = TRUE )"},{"path":"https://kharchenkolab.github.io/numbat/reference/plot_exp_roll.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot single-cell smoothed expression magnitude heatmap — plot_exp_roll","text":"gexp_roll_wide matrix Cell x gene smoothed expression magnitudes hc hclust Hierarchical clustring result k integer Number clusters gtf dataframe Transcript GTF lim numeric Limit expression magnitudes n_sample integer Number cells subsample reverse logical Whether reverse cell order plot_tree logical Whether plot dendrogram","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/plot_exp_roll.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot single-cell smoothed expression magnitude heatmap — plot_exp_roll","text":"ggplot single-cell heatmap window-smoothed expression CNV signals","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/plot_exp_roll.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot single-cell smoothed expression magnitude heatmap — plot_exp_roll","text":"","code":"p = plot_exp_roll(gexp_roll_example, gtf = gtf_hg38, hc = hc_example, k = 3)"},{"path":"https://kharchenkolab.github.io/numbat/reference/plot_mut_history.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot mutational history — plot_mut_history","title":"Plot mutational history — plot_mut_history","text":"Plot mutational history","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/plot_mut_history.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot mutational history — plot_mut_history","text":"","code":"plot_mut_history(   G,   clone_post = NULL,   edge_label_size = 4,   node_label_size = 6,   node_size = 10,   arrow_size = 2,   show_clone_size = TRUE,   show_distance = TRUE,   legend = TRUE,   edge_label = TRUE,   node_label = TRUE,   horizontal = TRUE,   pal = NULL )"},{"path":"https://kharchenkolab.github.io/numbat/reference/plot_mut_history.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot mutational history — plot_mut_history","text":"G igraph Mutation history graph clone_post dataframe Clone assignment posteriors edge_label_size numeric Size edge label node_label_size numeric Size node label node_size numeric Size nodes arrow_size numeric Size arrows show_clone_size logical Whether show clone size show_distance logical Whether show evolutionary distance clones legend logical Whether show legend edge_label logical Whether label edges node_label logical Whether label nodes horizontal logical Whether use horizontal layout pal named vector Node colors","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/plot_mut_history.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot mutational history — plot_mut_history","text":"ggplot object","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/plot_mut_history.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot mutational history — plot_mut_history","text":"","code":"p = plot_mut_history(mut_graph_example)"},{"path":"https://kharchenkolab.github.io/numbat/reference/plot_phylo_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot single-cell CNV calls along with the clonal phylogeny — plot_phylo_heatmap","title":"Plot single-cell CNV calls along with the clonal phylogeny — plot_phylo_heatmap","text":"Plot single-cell CNV calls along clonal phylogeny","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/plot_phylo_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot single-cell CNV calls along with the clonal phylogeny — plot_phylo_heatmap","text":"","code":"plot_phylo_heatmap(   gtree,   joint_post,   segs_consensus,   clone_post = NULL,   p_min = 0.9,   annot = NULL,   pal_annot = NULL,   annot_title = \"Annotation\",   annot_scale = NULL,   clone_dict = NULL,   clone_bar = TRUE,   clone_stack = TRUE,   pal_clone = NULL,   clone_title = \"Genotype\",   clone_legend = TRUE,   line_width = 0.1,   tree_height = 1,   branch_width = 0.2,   tip_length = 0.2,   annot_bar_width = 0.25,   clone_bar_width = 0.25,   bar_label_size = 7,   tvn_line = TRUE,   clone_line = FALSE,   exclude_gap = FALSE,   root_edge = TRUE,   raster = FALSE,   show_phylo = TRUE )"},{"path":"https://kharchenkolab.github.io/numbat/reference/plot_phylo_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot single-cell CNV calls along with the clonal phylogeny — plot_phylo_heatmap","text":"gtree tbl_graph single-cell phylogeny joint_post dataframe Joint single cell CNV posteriors segs_consensus datatframe Consensus segment dataframe clone_post dataframe Clone assignment posteriors p_min numeric Probability threshold display CNV calls annot dataframe Cell annotations, dataframe 'cell' additional annotation columns pal_annot named vector Colors cell annotations annot_title character Legend title annotation bar annot_scale ggplot scale Color scale annotation bar clone_dict named vector Clone annotations, mapping cell name clones clone_bar logical Whether display clone bar plot clone_stack character Whether plot clone assignment probabilities stacked bar pal_clone named vector Clone colors clone_title character Legend title clone bar clone_legend logical Whether display clone legend line_width numeric Line width CNV heatmap tree_height numeric Relative height phylogeny plot branch_width numeric Line width phylogeny tip_length numeric Length tips phylogeny annot_bar_width numeric Width annotation bar clone_bar_width numeric Width clone genotype bar bar_label_size numeric Size sidebar text labels tvn_line logical Whether draw line separating tumor normal cells clone_line logical Whether display borders clones heatmap exclude_gap logical Whether mark gap regions root_edge logical Whether plot root edge raster logical Whether raster images show_phylo logical Whether display phylogeny y axis","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/plot_phylo_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot single-cell CNV calls along with the clonal phylogeny — plot_phylo_heatmap","text":"ggplot panel","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/plot_phylo_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot single-cell CNV calls along with the clonal phylogeny — plot_phylo_heatmap","text":"","code":"p = plot_phylo_heatmap(     gtree = phylogeny_example,     joint_post = joint_post_example,     segs_consensus = segs_example)"},{"path":"https://kharchenkolab.github.io/numbat/reference/plot_psbulk.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a pseudobulk HMM profile — plot_psbulk","title":"Plot a pseudobulk HMM profile — plot_psbulk","text":"Plot pseudobulk HMM profile","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/plot_psbulk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a pseudobulk HMM profile — plot_psbulk","text":"","code":"plot_psbulk(   bulk,   use_pos = TRUE,   allele_only = FALSE,   min_LLR = 5,   min_depth = 8,   exp_limit = 2,   phi_mle = TRUE,   theta_roll = FALSE,   dot_size = 0.8,   dot_alpha = 0.5,   legend = TRUE,   exclude_gap = TRUE,   genome = \"hg38\",   text_size = 10,   raster = FALSE )"},{"path":"https://kharchenkolab.github.io/numbat/reference/plot_psbulk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a pseudobulk HMM profile — plot_psbulk","text":"bulk dataframe Pseudobulk profile use_pos logical Use marker position instead index x coordinate allele_only logical plot alleles min_LLR numeric LLR threshold event filtering min_depth numeric Minimum coverage depth SNP plotted exp_limit numeric Expression logFC axis limit phi_mle logical Whether plot estimates segmental expression fold change theta_roll logical Whether plot rolling estimates allele imbalance dot_size numeric Size marker dots dot_alpha numeric Transparency marker dots legend logical Whether show legend exclude_gap logical Whether mark gap regions centromeres genome character Genome build, either 'hg38' 'hg19' text_size numeric Size text plot raster logical Whether raster images","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/plot_psbulk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a pseudobulk HMM profile — plot_psbulk","text":"ggplot Plot pseudobulk HMM profile","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/plot_psbulk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a pseudobulk HMM profile — plot_psbulk","text":"","code":"p = plot_psbulk(bulk_example)"},{"path":"https://kharchenkolab.github.io/numbat/reference/plot_sc_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot single-cell smoothed expression magnitude heatmap — plot_sc_tree","title":"Plot single-cell smoothed expression magnitude heatmap — plot_sc_tree","text":"Plot single-cell smoothed expression magnitude heatmap","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/plot_sc_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot single-cell smoothed expression magnitude heatmap — plot_sc_tree","text":"","code":"plot_sc_tree(   gtree,   label_mut = TRUE,   label_size = 3,   dot_size = 2,   branch_width = 0.5,   tip = TRUE,   tip_length = 0.5,   pal_clone = NULL )"},{"path":"https://kharchenkolab.github.io/numbat/reference/plot_sc_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot single-cell smoothed expression magnitude heatmap — plot_sc_tree","text":"gtree tbl_graph single-cell phylogeny label_mut logical Whether label mutations label_size numeric Size mutation labels dot_size numeric Size mutation nodes branch_width numeric Width branches tree tip logical Whether plot tip point tip_length numeric Length tips pal_clone named vector Clone colors","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/plot_sc_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot single-cell smoothed expression magnitude heatmap — plot_sc_tree","text":"ggplot single-cell phylogeny mutation history labeled","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/plot_sc_tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot single-cell smoothed expression magnitude heatmap — plot_sc_tree","text":"","code":"p = plot_sc_tree(phylogeny_example)"},{"path":"https://kharchenkolab.github.io/numbat/reference/pnorm.range.log.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the total probability from a region of a normal pdf — pnorm.range.log","title":"Get the total probability from a region of a normal pdf — pnorm.range.log","text":"Get total probability region normal pdf","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/pnorm.range.log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the total probability from a region of a normal pdf — pnorm.range.log","text":"","code":"pnorm.range.log(lower, upper, mu, sd)"},{"path":"https://kharchenkolab.github.io/numbat/reference/pre_likelihood_hmm.html","id":null,"dir":"Reference","previous_headings":"","what":"HMM object for unit tests — pre_likelihood_hmm","title":"HMM object for unit tests — pre_likelihood_hmm","text":"HMM object unit tests","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/pre_likelihood_hmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HMM object for unit tests — pre_likelihood_hmm","text":"","code":"pre_likelihood_hmm"},{"path":"https://kharchenkolab.github.io/numbat/reference/pre_likelihood_hmm.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"HMM object for unit tests — pre_likelihood_hmm","text":"object class list length 10.","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/preprocess_allele.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocess allele data — preprocess_allele","title":"Preprocess allele data — preprocess_allele","text":"Preprocess allele data","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/preprocess_allele.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocess allele data — preprocess_allele","text":"","code":"preprocess_allele(sample, vcf_pu, vcf_phased, AD, DP, barcodes, gtf, gmap)"},{"path":"https://kharchenkolab.github.io/numbat/reference/preprocess_allele.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocess allele data — preprocess_allele","text":"sample character Sample label vcf_pu dataframe Pileup VCF cell-snp-lite vcf_phased dataframe Phased VCF eagle2 AD dgTMatrix Alt allele depth matrix pileup DP dgTMatrix Total allele depth matrix pileup barcodes vector List barcodes pileup gtf dataframe Transcript GTF gmap dataframe Genetic map","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/preprocess_allele.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preprocess allele data — preprocess_allele","text":"dataframe Allele counts cell","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/ref_hca.html","id":null,"dir":"Reference","previous_headings":"","what":"reference expression magnitudes from HCA — ref_hca","title":"reference expression magnitudes from HCA — ref_hca","text":"reference expression magnitudes HCA","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/ref_hca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"reference expression magnitudes from HCA — ref_hca","text":"","code":"ref_hca"},{"path":"https://kharchenkolab.github.io/numbat/reference/ref_hca.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"reference expression magnitudes from HCA — ref_hca","text":"object class matrix (inherits array) 24756 rows 12 columns.","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/ref_hca_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"reference expression counts from HCA — ref_hca_counts","title":"reference expression counts from HCA — ref_hca_counts","text":"reference expression counts HCA","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/ref_hca_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"reference expression counts from HCA — ref_hca_counts","text":"","code":"ref_hca_counts"},{"path":"https://kharchenkolab.github.io/numbat/reference/ref_hca_counts.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"reference expression counts from HCA — ref_hca_counts","text":"object class matrix (inherits array) 24857 rows 12 columns.","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/relevel_chrom.html","id":null,"dir":"Reference","previous_headings":"","what":"Relevel chromosome column — relevel_chrom","title":"Relevel chromosome column — relevel_chrom","text":"Relevel chromosome column","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/relevel_chrom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Relevel chromosome column — relevel_chrom","text":"","code":"relevel_chrom(df)"},{"path":"https://kharchenkolab.github.io/numbat/reference/relevel_chrom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Relevel chromosome column — relevel_chrom","text":"df dataframe Dataframe chromosome column","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/resolve_cnvs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get unique CNVs from set of segments — resolve_cnvs","title":"Get unique CNVs from set of segments — resolve_cnvs","text":"Get unique CNVs set segments","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/resolve_cnvs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get unique CNVs from set of segments — resolve_cnvs","text":"","code":"resolve_cnvs(segs_all, min_overlap = 0.5, debug = FALSE)"},{"path":"https://kharchenkolab.github.io/numbat/reference/resolve_cnvs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get unique CNVs from set of segments — resolve_cnvs","text":"segs_all dataframe CNV segments multiple samples min_overlap numeric scalar Minimum overlap fraction determine count two events overlapping","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/resolve_cnvs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get unique CNVs from set of segments — resolve_cnvs","text":"dataframe Consensus CNV segments","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/retest_bulks.html","id":null,"dir":"Reference","previous_headings":"","what":"retest consensus segments on pseudobulks — retest_bulks","title":"retest consensus segments on pseudobulks — retest_bulks","text":"retest consensus segments pseudobulks","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/retest_bulks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"retest consensus segments on pseudobulks — retest_bulks","text":"","code":"retest_bulks(   bulks,   segs_consensus = NULL,   t = 1e-05,   min_genes = 10,   gamma = 20,   nu = 1,   use_loh = FALSE,   diploid_chroms = NULL,   ncores = 1,   exclude_neu = TRUE,   min_LLR = 5 )"},{"path":"https://kharchenkolab.github.io/numbat/reference/retest_bulks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"retest consensus segments on pseudobulks — retest_bulks","text":"bulks dataframe Pseudobulk profiles segs_consensus dataframe Consensus segments use_loh logical Whether use loh baseline diploid_chroms vector User-provided diploid chromosomes","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/retest_bulks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"retest consensus segments on pseudobulks — retest_bulks","text":"dataframe Retested pseudobulks","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/retest_cnv.html","id":null,"dir":"Reference","previous_headings":"","what":"retest CNVs in a pseudobulk — retest_cnv","title":"retest CNVs in a pseudobulk — retest_cnv","text":"retest CNVs pseudobulk","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/retest_cnv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"retest CNVs in a pseudobulk — retest_cnv","text":"","code":"retest_cnv(   bulk,   theta_min = 0.08,   logphi_min = 0.25,   gamma = 20,   allele_only = FALSE,   exclude_neu = TRUE )"},{"path":"https://kharchenkolab.github.io/numbat/reference/retest_cnv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"retest CNVs in a pseudobulk — retest_cnv","text":"bulk pesudobulk dataframe gamma numeric Dispersion parameter Beta-Binomial allele model allele_only whether retest using allele data","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/retest_cnv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"retest CNVs in a pseudobulk — retest_cnv","text":"dataframe segments CNV posterior information","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/return_missing_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the format of a given file — return_missing_columns","title":"Check the format of a given file — return_missing_columns","text":"Check format given file","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/return_missing_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the format of a given file — return_missing_columns","text":"","code":"return_missing_columns(file, expected_colnames = NULL)"},{"path":"https://kharchenkolab.github.io/numbat/reference/run_group_hmms.html","id":null,"dir":"Reference","previous_headings":"","what":"Run multiple HMMs — run_group_hmms","title":"Run multiple HMMs — run_group_hmms","text":"Run multiple HMMs","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/run_group_hmms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run multiple HMMs — run_group_hmms","text":"","code":"run_group_hmms(   bulks,   t = 1e-04,   gamma = 20,   alpha = 1e-04,   min_genes = 10,   nu = 1,   common_diploid = TRUE,   diploid_chroms = NULL,   allele_only = FALSE,   retest = TRUE,   run_hmm = TRUE,   exclude_neu = TRUE,   ncores = 1,   verbose = FALSE,   debug = FALSE )"},{"path":"https://kharchenkolab.github.io/numbat/reference/run_group_hmms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run multiple HMMs — run_group_hmms","text":"bulks dataframe Pseudobulk profiles t numeric Transition probability gamma numeric Dispersion parameter Beta-Binomial allele model alpha numeric P value cut-determine segment clusters find_diploid common_diploid logical Whether find common diploid regions pseudobulks diploid_chroms character vector Known diploid chromosomes use baseline allele_only logical Whether use allele data run HMM retest logcial Whether retest CNVs run_hmm logical Whether run HMM segments just retest ncores integer Number cores","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/run_numbat.html","id":null,"dir":"Reference","previous_headings":"","what":"Run workflow to decompose tumor subclones — run_numbat","title":"Run workflow to decompose tumor subclones — run_numbat","text":"Run workflow decompose tumor subclones","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/run_numbat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run workflow to decompose tumor subclones — run_numbat","text":"","code":"run_numbat(   count_mat,   lambdas_ref,   df_allele,   gtf = NULL,   genome = \"hg38\",   out_dir = tempdir(),   max_iter = 2,   max_nni = 100,   t = 1e-05,   gamma = 20,   min_LLR = 5,   alpha = 1e-04,   eps = 1e-05,   max_entropy = 0.5,   init_k = 3,   min_cells = 50,   tau = 0.3,   nu = 1,   max_cost = ncol(count_mat) * tau,   n_cut = 0,   min_depth = 0,   common_diploid = TRUE,   min_overlap = 0.45,   ncores = 1,   ncores_nni = ncores,   random_init = FALSE,   segs_loh = NULL,   call_clonal_loh = FALSE,   verbose = TRUE,   diploid_chroms = NULL,   segs_consensus_fix = NULL,   use_loh = NULL,   min_genes = 10,   skip_nj = FALSE,   multi_allelic = TRUE,   p_multi = 1 - alpha,   plot = TRUE,   check_convergence = FALSE,   exclude_neu = TRUE )"},{"path":"https://kharchenkolab.github.io/numbat/reference/run_numbat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run workflow to decompose tumor subclones — run_numbat","text":"count_mat dgCMatrix Raw count matrices rownames genes column names cells lambdas_ref matrix Either named vector gene names names normalized expression values, matrix rownames genes columns pseudobulk names df_allele dataframe Allele counts per cell, produced preprocess_allele gtf dataframe Transcript GTF, NULL use default GTF specified genome genome character Genome version (hg38, hg19, mm10) out_dir string Output directory max_iter integer Maximum number iterations run phyologeny optimization max_nni integer Maximum number iterations run NNI ML phylogeny inference t numeric Transition probability gamma numeric Dispersion parameter Beta-Binomial allele model min_LLR numeric Minimum LLR filter CNVs alpha numeric P value cutoff diploid finding eps numeric Convergence threshold ML tree search max_entropy numeric Entropy threshold filter CNVs init_k integer Number clusters initial clustering min_cells integer Minimum number cells run HMM tau numeric Factor determine max_cost function number cells (0-1) nu numeric Phase switch rate max_cost numeric Likelihood threshold collapse internal branches n_cut integer Number cuts phylogeny define subclones min_depth integer Minimum allele depth common_diploid logical Whether find common diploid regions group peusdobulks min_overlap numeric Minimum CNV overlap threshold ncores integer Number threads use ncores_nni integer Number threads use NNI random_init logical Whether initiate phylogney using random tree (internal use ) segs_loh dataframe Segments clonal LOH excluded call_clonal_loh logical Whether call segments clonal LOH verbose logical Verbosity diploid_chroms vector Known diploid chromosomes segs_consensus_fix dataframe Pre-determined segmentation consensus CNVs use_loh logical Whether include LOH regions expression baseline min_genes integer Minimum number genes call segment skip_nj logical Whether skip NJ tree construction use UPGMA multi_allelic logical Whether call multi-allelic CNVs p_multi numeric P value cutoff calling multi-allelic CNVs plot logical Whether plot results check_convergence logical Whether terminate iterations based consensus CNV convergence exclude_neu logical Whether exclude neutral segments CNV retesting (internal use )","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/run_numbat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run workflow to decompose tumor subclones — run_numbat","text":"status code","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/segs_example.html","id":null,"dir":"Reference","previous_headings":"","what":"example CNV segments dataframe — segs_example","title":"example CNV segments dataframe — segs_example","text":"example CNV segments dataframe","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/segs_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"example CNV segments dataframe — segs_example","text":"","code":"segs_example"},{"path":"https://kharchenkolab.github.io/numbat/reference/segs_example.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"example CNV segments dataframe — segs_example","text":"object class data.table (inherits data.frame) 27 rows 30 columns.","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/simes_p.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate simes' p — simes_p","title":"Calculate simes' p — simes_p","text":"Calculate simes' p","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/simes_p.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate simes' p — simes_p","text":"","code":"simes_p(p.vals, n_dim)"},{"path":"https://kharchenkolab.github.io/numbat/reference/simplify_history.html","id":null,"dir":"Reference","previous_headings":"","what":"Simplify the mutational history based on likelihood evidence — simplify_history","title":"Simplify the mutational history based on likelihood evidence — simplify_history","text":"Simplify mutational history based likelihood evidence","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/simplify_history.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simplify the mutational history based on likelihood evidence — simplify_history","text":"","code":"simplify_history(G, l_matrix, max_cost = 150, n_cut = 0, verbose = TRUE)"},{"path":"https://kharchenkolab.github.io/numbat/reference/simplify_history.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simplify the mutational history based on likelihood evidence — simplify_history","text":"G igraph Mutation graph l_matrix matrix Mutation placement likelihood matrix (node mutation)","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/simplify_history.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simplify the mutational history based on likelihood evidence — simplify_history","text":"igraph Mutation graph","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/smooth_expression.html","id":null,"dir":"Reference","previous_headings":"","what":"filtering, normalization and capping — smooth_expression","title":"filtering, normalization and capping — smooth_expression","text":"filtering, normalization capping","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/smooth_expression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"filtering, normalization and capping — smooth_expression","text":"","code":"smooth_expression(count_mat, lambdas_ref, gtf, window = 101, verbose = FALSE)"},{"path":"https://kharchenkolab.github.io/numbat/reference/smooth_expression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"filtering, normalization and capping — smooth_expression","text":"count_mat dgCMatrix Gene expression counts lambdas_ref matrix Reference expression profiles gtf dataframe Transcript gtf","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/smooth_expression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"filtering, normalization and capping — smooth_expression","text":"dataframe Log(x+1) transformed normalized expression values single cells","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/smooth_segs.html","id":null,"dir":"Reference","previous_headings":"","what":"Smooth the segments after HMM decoding — smooth_segs","title":"Smooth the segments after HMM decoding — smooth_segs","text":"Smooth segments HMM decoding","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/smooth_segs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Smooth the segments after HMM decoding — smooth_segs","text":"","code":"smooth_segs(bulk, min_genes = 10)"},{"path":"https://kharchenkolab.github.io/numbat/reference/smooth_segs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smooth the segments after HMM decoding — smooth_segs","text":"bulk dataframe Pseudobulk profile min_genes integer Minimum number genes call segment","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/smooth_segs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Smooth the segments after HMM decoding — smooth_segs","text":"dataframe Pseudobulk profile","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/switch_prob_cm.html","id":null,"dir":"Reference","previous_headings":"","what":"predict phase switch probablity as a function of genetic distance — switch_prob_cm","title":"predict phase switch probablity as a function of genetic distance — switch_prob_cm","text":"predict phase switch probablity function genetic distance","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/switch_prob_cm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"predict phase switch probablity as a function of genetic distance — switch_prob_cm","text":"","code":"switch_prob_cm(d, nu = 1, min_p = 1e-10)"},{"path":"https://kharchenkolab.github.io/numbat/reference/switch_prob_cm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"predict phase switch probablity as a function of genetic distance — switch_prob_cm","text":"d numeric vector Genetic distance cM nu numeric Phase switch rate min_p numeric Minimum phase switch probability","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/switch_prob_cm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"predict phase switch probablity as a function of genetic distance — switch_prob_cm","text":"numeric vector Phase switch probability","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/t_test_pval.html","id":null,"dir":"Reference","previous_headings":"","what":"T-test wrapper, handles error for insufficient observations — t_test_pval","title":"T-test wrapper, handles error for insufficient observations — t_test_pval","text":"T-test wrapper, handles error insufficient observations","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/t_test_pval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"T-test wrapper, handles error for insufficient observations — t_test_pval","text":"","code":"t_test_pval(x, y)"},{"path":"https://kharchenkolab.github.io/numbat/reference/test_multi_allelic.html","id":null,"dir":"Reference","previous_headings":"","what":"test for multi-allelic CNVs — test_multi_allelic","title":"test for multi-allelic CNVs — test_multi_allelic","text":"test multi-allelic CNVs","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/test_multi_allelic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"test for multi-allelic CNVs — test_multi_allelic","text":"","code":"test_multi_allelic(bulks, segs_consensus, min_LLR = 5, p_min = 0.999)"},{"path":"https://kharchenkolab.github.io/numbat/reference/test_multi_allelic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"test for multi-allelic CNVs — test_multi_allelic","text":"bulks dataframe Pseudobulk profiles segs_consensus dataframe Consensus segments min_LLR numeric CNV LLR threshold filter events p_min numeric Probability threshold call multi-allelic events","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/test_multi_allelic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"test for multi-allelic CNVs — test_multi_allelic","text":"dataframe Consensus segments annotated multi-allelic events","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/theta_hat_roll.html","id":null,"dir":"Reference","previous_headings":"","what":"Rolling estimate of imbalance level theta — theta_hat_roll","title":"Rolling estimate of imbalance level theta — theta_hat_roll","text":"Rolling estimate imbalance level theta","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/theta_hat_roll.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rolling estimate of imbalance level theta — theta_hat_roll","text":"","code":"theta_hat_roll(major_count, minor_count, h)"},{"path":"https://kharchenkolab.github.io/numbat/reference/theta_hat_roll.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rolling estimate of imbalance level theta — theta_hat_roll","text":"major_count vector major allele count minor_count vector minor allele count h window size","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/theta_hat_roll.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rolling estimate of imbalance level theta — theta_hat_roll","text":"rolling estimate theta","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/theta_hat_seg.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate of imbalance level theta in a segment — theta_hat_seg","title":"Estimate of imbalance level theta in a segment — theta_hat_seg","text":"Estimate imbalance level theta segment","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/theta_hat_seg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate of imbalance level theta in a segment — theta_hat_seg","text":"","code":"theta_hat_seg(major_count, minor_count)"},{"path":"https://kharchenkolab.github.io/numbat/reference/theta_hat_seg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate of imbalance level theta in a segment — theta_hat_seg","text":"major_count vector major allele count minor_count vector minor allele count","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/theta_hat_seg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate of imbalance level theta in a segment — theta_hat_seg","text":"estimate theta","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/transfer_links.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate the direct upstream or downstream node on the edges — transfer_links","title":"Annotate the direct upstream or downstream node on the edges — transfer_links","text":"Annotate direct upstream downstream node edges","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/transfer_links.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate the direct upstream or downstream node on the edges — transfer_links","text":"","code":"transfer_links(G)"},{"path":"https://kharchenkolab.github.io/numbat/reference/transfer_links.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate the direct upstream or downstream node on the edges — transfer_links","text":"G igraph Mutation graph","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/transfer_links.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotate the direct upstream or downstream node on the edges — transfer_links","text":"igraph Mutation graph","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/upgma.html","id":null,"dir":"Reference","previous_headings":"","what":"UPGMA and WPGMA clustering — upgma","title":"UPGMA and WPGMA clustering — upgma","text":"UPGMA WPGMA clustering","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/upgma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"UPGMA and WPGMA clustering — upgma","text":"","code":"upgma(D, method = \"average\", ...)"},{"path":"https://kharchenkolab.github.io/numbat/reference/upgma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"UPGMA and WPGMA clustering — upgma","text":"D distance matrix. method agglomeration method used. (unambiguous abbreviation ) one \"ward\", \"single\", \"complete\", \"average\", \"mcquitty\", \"median\" \"centroid\". default \"average\". ... arguments passed methods.","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/vcf_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"example VCF header — vcf_meta","title":"example VCF header — vcf_meta","text":"example VCF header","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/vcf_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"example VCF header — vcf_meta","text":"","code":"vcf_meta"},{"path":"https://kharchenkolab.github.io/numbat/reference/vcf_meta.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"example VCF header — vcf_meta","text":"object class character length 65.","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/viterbi_loh.html","id":null,"dir":"Reference","previous_headings":"","what":"Viterbi for clonal LOH detection — viterbi_loh","title":"Viterbi for clonal LOH detection — viterbi_loh","text":"Viterbi clonal LOH detection","code":""},{"path":"https://kharchenkolab.github.io/numbat/reference/viterbi_loh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Viterbi for clonal LOH detection — viterbi_loh","text":"","code":"viterbi_loh(hmm, ...)"},{"path":"https://kharchenkolab.github.io/numbat/reference/viterbi_loh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Viterbi for clonal LOH detection — viterbi_loh","text":"hmm HMM object; expect variables x (SNP count), snp_sig (snp rate standard deviation), pm (snp density ref loh states), pn (gene lengths), d (total expression depth), y (expression count), lambda_star (reference expression rate), mu (global expression mean), sig (global expression standard deviation), Pi (transition prob matrix), delta (prior state), phi (expression fold change state)","code":""},{"path":"https://kharchenkolab.github.io/numbat/news/index.html","id":"numbat-142---09182023","dir":"Changelog","previous_headings":"","what":"numbat 1.4.2 - 09/18/2023","title":"numbat 1.4.2 - 09/18/2023","text":"CRAN release: 2024-09-20 Fix pseudobulk plotting legend (#182) Requirement dplyr tidyr versions (#189, #190) Fix Numbat$plot_exp_roll (#169) Fix CNV states reporting segs_loh provided (#183) Fix n_states reporting (#178) Improve error handling pileup_and_phase (#179)","code":""},{"path":"https://kharchenkolab.github.io/numbat/news/index.html","id":"numbat-140---02232023","dir":"Changelog","previous_headings":"","what":"numbat 1.4.0 - 02/23/2023","title":"numbat 1.4.0 - 02/23/2023","text":"CRAN release: 2024-02-23 Integration hahmmr Better input checking pileup_and_phase Fix compatibility igraph v2.0+ tidygraph v1.3+ (#150) Fix multiallelic CNV state probability reporting (#146)","code":""},{"path":"https://kharchenkolab.github.io/numbat/news/index.html","id":"numbat-133---08152023","dir":"Changelog","previous_headings":"","what":"numbat 1.3.3 - 08/15/2023","title":"numbat 1.3.3 - 08/15/2023","text":"Fix plotting issue #135 Fix CRAN check compilation issues","code":""},{"path":"https://kharchenkolab.github.io/numbat/news/index.html","id":"numbat-132---06052023","dir":"Changelog","previous_headings":"","what":"numbat 1.3.2 - 06/05/2023","title":"numbat 1.3.2 - 06/05/2023","text":"CRAN release: 2023-06-06 Adding better checks input files Improve error handling (#122, #127)","code":""},{"path":"https://kharchenkolab.github.io/numbat/news/index.html","id":"numbat-131---04142023","dir":"Changelog","previous_headings":"","what":"numbat 1.3.1 - 04/14/2023","title":"numbat 1.3.1 - 04/14/2023","text":"Fixing bug #68 - may cause slight changes results runs segs_loh/call_segs_loh enabled.","code":""},{"path":"https://kharchenkolab.github.io/numbat/news/index.html","id":"numbat-130---03312023","dir":"Changelog","previous_headings":"","what":"numbat 1.3.0 - 03/31/2023","title":"numbat 1.3.0 - 03/31/2023","text":"CRAN release: 2023-04-02 Allows users supply existing CNV profiles (e.g. bulk WGS/WES analysis) via segs_consensus_fix parameter Adding call_clonal_loh option call clonal LOH events within run_numbat Fixing bug #81 Fixing oversegmentation issue find_common_diploid caused annot_segs","code":""},{"path":"https://kharchenkolab.github.io/numbat/news/index.html","id":"numbat-122---02132023","dir":"Changelog","previous_headings":"","what":"numbat 1.2.2 - 02/13/2023","title":"numbat 1.2.2 - 02/13/2023","text":"CRAN release: 2023-02-14 Introduce n_cut parameter specify number clones define phylogeny Allows users redefine subclones phylogeny via nb$cutree","code":""},{"path":"https://kharchenkolab.github.io/numbat/news/index.html","id":"numbat-121---01112023","dir":"Changelog","previous_headings":"","what":"numbat 1.2.1 - 01/11/2023","title":"numbat 1.2.1 - 01/11/2023","text":"CRAN release: 2023-01-10 Fixing bugs #30, #79, #89","code":""},{"path":"https://kharchenkolab.github.io/numbat/news/index.html","id":"numbat-120---12262022","dir":"Changelog","previous_headings":"","what":"numbat 1.2.0 - 12/26/2022","title":"numbat 1.2.0 - 12/26/2022","text":"Numbat now works F1 hybrid mice! Check new tutorial Articles. Fixing bugs #80, #82 Offers stacked clone bars plot_phylo_heatmap","code":""},{"path":"https://kharchenkolab.github.io/numbat/news/index.html","id":"numbat-110---11282022","dir":"Changelog","previous_headings":"","what":"numbat 1.1.0 - 11/28/2022","title":"numbat 1.1.0 - 11/28/2022","text":"CRAN release: 2022-11-29 Externalize phylogeny module separate package (scistreer) Prepare new CRAN version Better CNV state legends plot_bulks","code":""},{"path":"https://kharchenkolab.github.io/numbat/news/index.html","id":"numbat-105---11272022","dir":"Changelog","previous_headings":"","what":"numbat 1.0.5 - 11/27/2022","title":"numbat 1.0.5 - 11/27/2022","text":"Fixing bugs #65, #66, #67 Retire dependency reshape2","code":""},{"path":"https://kharchenkolab.github.io/numbat/news/index.html","id":"numbat-104---11202022","dir":"Changelog","previous_headings":"","what":"numbat 1.0.4 - 11/20/2022","title":"numbat 1.0.4 - 11/20/2022","text":"Improving error handling removing python dependency (argparse) pileup_and_phase.R Allows plotting mutliple annotations plot_phylo_heatmap (thanks @whtns) Adding diagnostic messages","code":""},{"path":"https://kharchenkolab.github.io/numbat/news/index.html","id":"numbat-103---10092022","dir":"Changelog","previous_headings":"","what":"numbat 1.0.3 - 10/09/2022","title":"numbat 1.0.3 - 10/09/2022","text":"Fail gracefully CNV remains retest_bulks Passing gamma parameter retest_bulks","code":""},{"path":"https://kharchenkolab.github.io/numbat/news/index.html","id":"numbat-102---09072022","dir":"Changelog","previous_headings":"","what":"numbat 1.0.2 - 09/07/2022","title":"numbat 1.0.2 - 09/07/2022","text":"CRAN release: 2022-09-15 Conform CRAN guidelines Removed ATC2 examples package data - users can download lab server link instead New option specify genome version (genome = 'hg38' 'hg19'). Support plotting centromeres gap regions hg19. Removed genetic maps package data longer provided input run_numbat. Annotation genetic distance performed pileup_and_phase.R script instead, using genetic map included Eagle2.","code":""},{"path":"https://kharchenkolab.github.io/numbat/news/index.html","id":"numbat-100---08122022","dir":"Changelog","previous_headings":"","what":"numbat 1.0.0 - 08/12/2022","title":"numbat 1.0.0 - 08/12/2022","text":"Archival version paper","code":""},{"path":"https://kharchenkolab.github.io/numbat/news/index.html","id":"numbat-013---07022022","dir":"Changelog","previous_headings":"","what":"numbat 0.1.3 - 07/02/2022","title":"numbat 0.1.3 - 07/02/2022","text":"Speed NNI using RcppParallel (#34). 10x faster much memory efficient (memory requirement constant respect number threads). Speed expression single-cell testing using roptim. Approximately 2x speedup. New LLR metric CNV filtering inflated (default: 5). keep heterozygous SNPs alelle dataframe reduce memory usage","code":""}]
